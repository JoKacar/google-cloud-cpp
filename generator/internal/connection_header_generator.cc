// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "generator/internal/connection_header_generator.h"
#include "generator/internal/codegen_utils.h"
#include "generator/internal/data_model.h"
#include "generator/internal/printer.h"
#include <google/protobuf/descriptor.h>
#include <memory>
#include <sstream>
#include <string>

namespace google {
namespace codegen {
namespace internal {

std::vector<std::string> BuildClientHeaderIncludes(
    google::protobuf::ServiceDescriptor const* service) {
  return {
      LocalInclude(
          absl::StrCat(internal::ServiceNameToFilePath(service->full_name()),
                       "_stub" + GeneratedFileSuffix() + ".h")),
      // TODO(sdhart): change this to system once build issues are resolved
      LocalInclude(absl::StrCat(
          absl::StripSuffix(service->file()->name(), ".proto"), ".pb.h")),
      LocalInclude("google/cloud/status_or.h"),
      LocalInclude("google/cloud/backoff_policy.h"),
      LocalInclude("google/cloud/polling_policy.h"),
      SystemInclude("memory"),
  };
}

std::vector<std::string> BuildClientHeaderNamespaces(
    google::protobuf::ServiceDescriptor const* service) {
  std::vector<std::string> v = absl::StrSplit(service->file()->name(), '/');
  auto name = *--v.end();
  std::string inline_ns =
      absl::AsciiStrToUpper(absl::StripSuffix(name, ".proto")) + "_CLIENT_NS";
  return {"google", "cloud", std::string(absl::StripSuffix(name, ".proto")),
          inline_ns};
}

bool GenerateClientConnectionHeader(
    google::protobuf::ServiceDescriptor const* service,
    std::map<std::string, std::string> const& vars, Printer& p,
    std::string* /* error */) {
  auto includes = BuildClientHeaderIncludes(service);
  auto namespaces = BuildClientHeaderNamespaces(service);

  p->Print(vars,
           "// Generated by the Codegen C++ plugin.\n"
           "// If you make any local changes, they will be lost.\n"
           "// source: $proto_file_name$\n"
           "#ifndef $header_include_guard_const$\n"
           "#define $header_include_guard_const$\n"
           "\n");

  for (auto include : includes) {
    p->Print("#include $include$\n", "include", include);
  }
  p->Print(vars, "\n");

  for (auto nspace : namespaces) {
    if (absl::EndsWith(nspace, "_CLIENT_NS")) {
      p->Print("inline namespace $namespace$ {\n", "namespace", nspace);
    } else {
      p->Print("namespace $namespace$ {\n", "namespace", nspace);
    }
  }

  p->Print(vars,
           "\n"
           "$class_comment_block$\n"
           "class $class_name$Connection {\n"
           " public:\n"
           "  virtual ~$class_name$Connection() = 0;\n\n");

  DataModel::PrintMethods(
      service, vars, p,
      "  virtual google::cloud::StatusOr<$response_object$> \n"
      "  $method_name$($request_object$ const& request) = 0;\n"
      "\n",
      NoStreamingPredicate);

  p->Print(vars, "};\n\n");

  p->Print(
      vars,
      "std::shared_ptr<$class_name$Connection> Make$class_name$Connection(\n"
      "    ConnectionOptions const& options = ConnectionOptions());\n\n");

  p->Print(
      vars,
      "std::shared_ptr<$class_name$Connection> Make$class_name$Connection(\n"
      "    ConnectionOptions const& options,\n"
      "    std::unique_ptr<RetryPolicy> retry_policy,\n"
      "    std::unique_ptr<BackoffPolicy> backoff_policy,\n"
      "    std::unique_ptr<PollingPolicy> polling_policy);\n\n");

  p->Print(
      vars,
      "namespace internal {\n"
      "std::shared_ptr<$class_name$Connection> Make$class_name$Connection(\n"
      "    std::shared_ptr<internal::$class_name$Stub> stub,\n"
      "    std::unique_ptr<RetryPolicy> retry_policy,\n"
      "    std::unique_ptr<BackoffPolicy> backoff_policy,\n"
      "    std::unique_ptr<PollingPolicy> polling_policy);\n"
      "}  // namespace internal\n\n");

  std::reverse(namespaces.begin(), namespaces.end());
  for (auto const& nspace : namespaces) {
    p->Print("}  // namespace $namespace$\n", "namespace", nspace);
  }

  p->Print(vars, "#endif // $header_include_guard_const$\n");

  return true;
}

}  // namespace internal
}  // namespace codegen
}  // namespace google
