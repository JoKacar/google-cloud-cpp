// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "generator/internal/stub_factory_rest_generator.h"
#include "generator/internal/codegen_utils.h"
#include "generator/internal/printer.h"
#include <google/protobuf/descriptor.h>

namespace google {
namespace cloud {
namespace generator_internal {

StubFactoryRestGenerator::StubFactoryRestGenerator(
    google::protobuf::ServiceDescriptor const* service_descriptor,
    VarsDictionary service_vars,
    std::map<std::string, VarsDictionary> service_method_vars,
    google::protobuf::compiler::GeneratorContext* context)
    : ServiceCodeGenerator("stub_factory_rest_header_path",
                           "stub_factory_rest_cc_path", service_descriptor,
                           std::move(service_vars),
                           std::move(service_method_vars), context) {}

Status StubFactoryRestGenerator::GenerateHeader() {
  HeaderPrint(CopyrightLicenseFileHeader());
  HeaderPrint(R"""(
// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: $proto_file_name$

#ifndef $header_include_guard$
#define $header_include_guard$

)""");

  // includes
  HeaderLocalIncludes({vars("stub_rest_header_path"), "google/cloud/options.h",
                       "google/cloud/version.h"});
  HeaderSystemIncludes({"memory"});

  auto result = HeaderOpenNamespaces(NamespaceType::kInternal);
  if (!result.ok()) return result;

  HeaderPrint(R"""(
std::shared_ptr<$stub_rest_class_name$> CreateDefault$stub_rest_class_name$(
    Options& options);
)""");

  HeaderCloseNamespaces();
  // close header guard
  HeaderPrint("\n#endif  // $header_include_guard$\n");
  return {};
}

Status StubFactoryRestGenerator::GenerateCc() {
  CcPrint(CopyrightLicenseFileHeader());
  CcPrint(R"""(
// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: $proto_file_name$

)""");

  // includes
  CcLocalIncludes(
      {vars("stub_factory_rest_header_path"), vars("logging_rest_header_path"),
       vars("metadata_rest_header_path"), vars("stub_rest_header_path"),
       "google/cloud/common_options.h", "google/cloud/credentials.h",
       "google/cloud/internal/credentials_impl.h",
       "google/cloud/internal/getenv.h",
       "google/cloud/internal/populate_common_options.h",
       "google/cloud/internal/rest_options.h",
       "google/cloud/internal/service_endpoint.h",
       "google/cloud/rest_options.h",
       "google/cloud/internal/absl_str_cat_quiet.h",
       "google/cloud/internal/algorithm.h", "google/cloud/options.h",
       "google/cloud/log.h", "absl/strings/match.h"});
  CcSystemIncludes({"memory"});

  auto result = CcOpenNamespaces(NamespaceType::kInternal);
  if (!result.ok()) return result;

  // factory function implementation
  CcPrint(R"""(
std::shared_ptr<$stub_rest_class_name$>
CreateDefault$stub_rest_class_name$(Options& options) {
  Options stub_creation_opts = options;
  if (!options.has<UnifiedCredentialsOption>()) {
    stub_creation_opts.set<UnifiedCredentialsOption>(
        MakeGoogleDefaultCredentials(internal::MakeAuthOptions(options)));
  }
  auto lro_endpoint = internal::DetermineServiceEndpoint(
      {},
      internal::FetchOption<rest_internal::LongrunningEndpointOption>(options),
      "https://longrunning.googleapis.com",
      options);

  auto service_endpoint = internal::DetermineServiceEndpoint(
      internal::GetEnv("$service_endpoint_env_var$"),
      internal::FetchOption<EndpointOption>(options), "$service_endpoint$",
      options);

  if (!lro_endpoint.ok() || !service_endpoint.ok()) {
    if (!service_endpoint.ok()) {
      options.unset<EndpointOption>();
      stub_creation_opts.set<UnifiedCredentialsOption>(
          internal::MakeErrorCredentials(std::move(service_endpoint).status()));
    } else {
      options.unset<rest_internal::LongrunningEndpointOption>();
      stub_creation_opts.set<UnifiedCredentialsOption>(
          internal::MakeErrorCredentials(std::move(lro_endpoint).status()));
    }
  } else {
    if (!absl::StartsWithIgnoreCase(*lro_endpoint, "http")) {
      stub_creation_opts.set<rest_internal::LongrunningEndpointOption>(
          absl::StrCat("https://", *lro_endpoint));
    } else {
      stub_creation_opts.set<rest_internal::LongrunningEndpointOption>(
          *lro_endpoint);
    }

    if (!absl::StartsWithIgnoreCase(*service_endpoint, "http")) {
      stub_creation_opts.set<EndpointOption>(absl::StrCat(
          "https://", *service_endpoint));
    } else {
      stub_creation_opts.set<EndpointOption>(*service_endpoint);
    }
    options.set<EndpointOption>(*service_endpoint);
    options.set<rest_internal::LongrunningEndpointOption>(*lro_endpoint);
  }

  std::shared_ptr<$stub_rest_class_name$> stub =
      std::make_shared<Default$stub_rest_class_name$>(std::move(stub_creation_opts));
  stub = std::make_shared<$metadata_rest_class_name$>(std::move(stub));
  if (internal::Contains(
      options.get<TracingComponentsOption>(), "rpc")) {
    GCP_LOG(INFO) << "Enabled logging for REST rpc calls";
    stub = std::make_shared<$logging_rest_class_name$>(
        std::move(stub),
        options.get<RestTracingOptionsOption>(),
        options.get<TracingComponentsOption>());
  }
  return stub;
}
)""");

  CcCloseNamespaces();
  return {};
}

}  // namespace generator_internal
}  // namespace cloud
}  // namespace google
