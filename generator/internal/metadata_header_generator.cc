// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "generator/internal/metadata_header_generator.h"
#include "generator/internal/codegen_utils.h"
#include "generator/internal/data_model.h"
#include "generator/internal/printer.h"
#include <google/protobuf/descriptor.h>
#include <map>
#include <string>

namespace google {
namespace codegen {
namespace internal {

std::vector<std::string> BuildClientMetadataHeaderIncludes(
    google::protobuf::ServiceDescriptor const* service) {
  return {LocalInclude(absl::StrCat(
              internal::ServiceNameToFilePath(service->full_name()),
              "_stub" + GeneratedFileSuffix() + ".h")),
          SystemInclude("memory"), SystemInclude("string")};
}

std::vector<std::string> BuildClientMetadataHeaderNamespaces(
    google::protobuf::ServiceDescriptor const* service) {
  std::vector<std::string> v = absl::StrSplit(service->file()->name(), '/');
  auto name = *--v.end();
  std::string inline_ns =
      absl::AsciiStrToUpper(absl::StripSuffix(name, ".proto")) + "_CLIENT_NS";
  return {"google", "cloud", std::string(absl::StripSuffix(name, ".proto")),
          inline_ns};
}

bool GenerateClientMetadataHeader(
    google::protobuf::ServiceDescriptor const* service,
    std::map<std::string, std::string> const& vars, Printer& p,
    std::string* /* error */) {
  auto includes = BuildClientMetadataHeaderIncludes(service);
  auto namespaces = BuildClientMetadataHeaderNamespaces(service);

  p->Print(vars,
           "// Generated by the Codegen C++ plugin.\n"
           "// If you make any local changes, they will be lost.\n"
           "// source: $proto_file_name$\n"
           "#ifndef $metadata_header_include_guard_const$\n"
           "#define $metadata_header_include_guard_const$\n"
           "\n");

  // includes
  for (auto const& include : includes) {
    p->Print("#include $include$\n", "include", include);
  }
  p->Print("\n");

  // namespace openers
  for (auto const& nspace : namespaces) {
    if (absl::EndsWith(nspace, "_CLIENT_NS")) {
      p->Print("inline namespace $namespace$ {\n", "namespace", nspace);
    } else {
      p->Print("namespace $namespace$ {\n", "namespace", nspace);
    }
  }
  // open internal namespace
  p->Print(vars, "namespace internal {\n");
  p->Print("\n");

  // Abstract interface Metadata base class
  p->Print(vars,
           "class $metadata_class_name$ : public $stub_class_name$ {\n"
           " public:\n"
           "  ~$metadata_class_name$() override = default;\n"
           "  explicit "
           "$metadata_class_name$(std::shared_ptr<$stub_class_name$> child);\n"
           "\n");

  DataModel::PrintMethods(service, vars, p,
                          {{IsResponseTypeEmpty,
                            // clang-format off
        "  Status $method_name$(\n",
        "  StatusOr<$response_type$> $method_name$(\n"},
       {"    grpc::ClientContext& context,\n"
        "    $request_type$ const& request) override;\n"
        "\n"}},
                          // clang-format on
                          IsNonStreaming);

  p->Print(vars,
           "  /// Poll a long-running operation.\n"
           "  StatusOr<google::longrunning::Operation> GetOperation(\n"
           "      grpc::ClientContext& context,\n"
           "      google::longrunning::GetOperationRequest const& request) override;\n"
           "\n"
           "  /// Cancel a long-running operation.\n"
           "  Status CancelOperation(\n"
           "      grpc::ClientContext& context,\n"
           "      google::longrunning::CancelOperationRequest const& request) override;\n"
           "\n");

  p->Print(vars,
           " private:\n"
           "  void SetMetadata(grpc::ClientContext& context,\n"
           "                   std::string const& request_params);\n"
           "  std::shared_ptr<$stub_class_name$> child_;\n"
           "  std::string api_client_header_;\n");
  p->Print(vars,
           "};  // $metadata_class_name$\n"
           "\n");

  p->Print(vars, "}  // namespace internal\n");
  std::reverse(namespaces.begin(), namespaces.end());
  for (auto const& nspace : namespaces) {
    p->Print("}  // namespace $namespace$\n", "namespace", nspace);
  }

  p->Print(vars, "#endif  // $metadata_header_include_guard_const$\n");

  return true;
}

}  // namespace internal
}  // namespace codegen
}  // namespace google
