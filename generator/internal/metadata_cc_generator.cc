// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "generator/internal/metadata_cc_generator.h"
#include "generator/internal/codegen_utils.h"
#include "generator/internal/data_model.h"
#include "generator/internal/printer.h"
#include <google/protobuf/descriptor.h>

namespace google {
namespace codegen {
namespace internal {

std::vector<std::string> BuildClientMetadataCCIncludes(
    google::protobuf::ServiceDescriptor const* service) {
  return {LocalInclude(
              absl::StrCat(internal::ServiceNameToFilePath(service->name()),
                           "_metadata" + GeneratedFileSuffix() + ".h")),
          LocalInclude("google/cloud/internal/compiler_info.h")};
}

std::vector<std::string> BuildClientMetadataCCNamespaces(
    google::protobuf::ServiceDescriptor const* service) {
  std::vector<std::string> v = absl::StrSplit(service->file()->name(), '/');
  auto name = *--v.end();
  std::string inline_ns =
      absl::AsciiStrToUpper(absl::StripSuffix(name, ".proto")) + "_CLIENT_NS";
  return {"google", "cloud", std::string(absl::StripSuffix(name, ".proto")),
          inline_ns};
}

bool GenerateClientMetadataCC(
    google::protobuf::ServiceDescriptor const* service,
    std::map<std::string, std::string> const& vars, Printer& p,
    std::string* /* error */) {
  auto includes = BuildClientMetadataCCIncludes(service);
  auto namespaces = BuildClientMetadataCCNamespaces(service);

  p->Print(vars,
           "// Generated by the Codegen C++ plugin.\n"
           "// If you make any local changes, they will be lost.\n"
           "// source: $proto_file_name$\n"
           "\n");

  // includes
  for (auto const& include : includes) {
    p->Print("#include $include$\n", "include", include);
  }
  p->Print("\n");

  // namespace opener
  for (auto const& nspace : namespaces) {
    if (absl::EndsWith(nspace, "_CLIENT_NS")) {
      p->Print("inline namespace $namespace$ {\n", "namespace", nspace);
    } else {
      p->Print("namespace $namespace$ {\n", "namespace", nspace);
    }
  }
  p->Print("\n");
  // open internal namespace
  p->Print(vars, "namespace internal {\n");

  p->Print(vars,
           "namespace {\n"
           "std::string ApiClientHeader() {\n"
           "  return \"gl-cpp/\" + google::cloud::internal::CompilerId() + "
           "\"-\" +\n"
           "         google::cloud::internal::CompilerVersion() + \"-\" +\n"
           "         google::cloud::internal::CompilerFeatures() + \"-\" "
           "+\n"
           "         google::cloud::internal::LanguageVersion() + \" "
           "gccl/\" +\n"
           "         google::cloud::version_string();\n"
           "}\n"
           "}  // namespace\n\n");

  // constructor
  p->Print(vars,
           "$metadata_class_name$::$metadata_class_name$(\n"
           "    std::shared_ptr<$stub_class_name$> child)\n"
           "    : child_(std::move(child)), "
           "api_client_header_(ApiClientHeader()) {}\n"
           "\n");

  // emit methods
  DataModel::PrintMethods(
      service, vars, p,
      {
          {IsResponseTypeEmpty,
           // clang-format off
        "Status\n",
        "StatusOr<$response_type$>\n"},
       {"$metadata_class_name$::$method_name$(\n"
        "    grpc::ClientContext& context,\n"
        "    $request_type$ const& request) {\n"
        "  SetMetadata(context, \"$method_request_param_key$=\" + request.$method_request_param_value$);\n"
        "  return child_->$method_name$(context, request);\n"
        "}\n"
        "\n",}
          // clang-format on
      },
      IsNonStreaming);

  p->Print(vars,
           // clang-format off
      "StatusOr<google::longrunning::Operation> $metadata_class_name$::GetOperation(\n"
      "    grpc::ClientContext& context,\n"
      "    google::longrunning::GetOperationRequest const& request) {\n"
      "  SetMetadata(context, \"name=\" + request.name());\n"
      "  return child_->GetOperation(context, request);\n"
      "}\n"
      "\n"
      "Status $metadata_class_name$::CancelOperation(\n"
      "    grpc::ClientContext& context,\n"
      "    google::longrunning::CancelOperationRequest const& request) {\n"
      "  SetMetadata(context, \"name=\" + request.name());\n"
      "  return child_->CancelOperation(context, request);\n"
      "}\n"
      "\n"
           // clang-format on
  );

  p->Print(
      vars,
      "void $metadata_class_name$::SetMetadata(grpc::ClientContext& context,\n"
      "                                        std::string const& "
      "request_params) {\n"
      "  context.AddMetadata(\"x-goog-request-params\", request_params);\n"
      "  context.AddMetadata(\"x-goog-api-client\", api_client_header_);\n"
      "\n");

  // close class defintion
  p->Print(vars, "};\n\n");

  p->Print(vars, "}  // namespace internal\n");
  std::reverse(namespaces.begin(), namespaces.end());
  for (auto const& nspace : namespaces) {
    p->Print("}  // namespace $namespace$\n", "namespace", nspace);
  }

  return true;
}

}  // namespace internal
}  // namespace codegen
}  // namespace google
