diff --git a/google/cloud/bigtable/cell.h b/google/cloud/bigtable/cell.h
index 8d95a2a2..9b693d86 100644
--- a/google/cloud/bigtable/cell.h
+++ b/google/cloud/bigtable/cell.h
@@ -15,6 +15,7 @@
 #ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGTABLE_CELL_H_
 #define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGTABLE_CELL_H_
 
+#include "third_party/absl/strings/cord.h"
 #include "third_party/cloud_cpp/google/cloud/bigtable/version.h"
 #include "third_party/cloud_cpp/google/cloud/internal/big_endian.h"
 #include "third_party/cloud_cpp/google/cloud/status_or.h"
@@ -40,8 +41,8 @@ inline namespace BIGTABLE_CLIENT_NS {
 class Cell {
  public:
   /// Create a Cell and fill it with data.
-  Cell(std::string row_key, std::string family_name,
-       std::string column_qualifier, std::int64_t timestamp, std::string value,
+  Cell(absl::Cord row_key, std::string family_name, absl::Cord column_qualifier,
+       std::int64_t timestamp, absl::Cord value,
        std::vector<std::string> labels)
       : row_key_(std::move(row_key)),
         family_name_(std::move(family_name)),
@@ -50,14 +51,39 @@ class Cell {
         value_(std::move(value)),
         labels_(std::move(labels)) {}
 
+  /// Create a Cell and fill it with data (string overload).
+  Cell(std::string const& row_key, std::string family_name,
+       std::string const& column_qualifier, std::int64_t timestamp,
+       std::string const& value, std::vector<std::string> labels)
+      : row_key_(row_key),
+        family_name_(std::move(family_name)),
+        column_qualifier_(column_qualifier),
+        timestamp_(timestamp),
+        value_(value),
+        labels_(std::move(labels)) {}
+
   /// Create a Cell and fill it with a 64-bit value encoded as big endian.
+  Cell(absl::Cord row_key, std::string family_name, absl::Cord column_qualifier,
+       std::int64_t timestamp, std::int64_t value,
+       std::vector<std::string> labels)
+      : row_key_(std::move(row_key)),
+        family_name_(std::move(family_name)),
+        column_qualifier_(std::move(column_qualifier)),
+        timestamp_(timestamp),
+        value_(google::cloud::internal::EncodeBigEndian(value)),
+        labels_(std::move(labels)) {}
+
+  /// Create a Cell and fill it with a 64-bit value encoded as big endian
+  /// (string overload).
   Cell(std::string row_key, std::string family_name,
        std::string column_qualifier, std::int64_t timestamp, std::int64_t value,
        std::vector<std::string> labels)
-      : Cell(std::move(row_key), std::move(family_name),
-             std::move(column_qualifier), timestamp,
-             google::cloud::internal::EncodeBigEndian(value),
-             std::move(labels)) {}
+      : row_key_(std::move(row_key)),
+        family_name_(std::move(family_name)),
+        column_qualifier_(std::move(column_qualifier)),
+        timestamp_(timestamp),
+        value_(google::cloud::internal::EncodeBigEndian(value)),
+        labels_(std::move(labels)) {}
 
   /// Create a cell and fill it with data, but with empty labels.
   Cell(std::string row_key, std::string family_name,
@@ -74,7 +100,7 @@ class Cell {
 
   /// Return the row key this cell belongs to. The returned value is not valid
   /// after this object is deleted.
-  std::string const& row_key() const { return row_key_; }
+  absl::Cord const& row_key() const { return row_key_; }
 
   /// Return the family this cell belongs to. The returned value is not valid
   /// after this object is deleted.
@@ -82,7 +108,7 @@ class Cell {
 
   /// Return the column this cell belongs to. The returned value is not valid
   /// after this object is deleted.
-  std::string const& column_qualifier() const { return column_qualifier_; }
+  absl::Cord const& column_qualifier() const { return column_qualifier_; }
 
   /// Return the timestamp of this cell.
   std::chrono::microseconds timestamp() const {
@@ -91,7 +117,7 @@ class Cell {
 
   /// Return the contents of this cell. The returned value is not valid after
   /// this object is deleted.
-  std::string const& value() const { return value_; }
+  absl::Cord const& value() const { return value_; }
 
   /**
    * Interpret the value as a big-endian encoded `T` and return it.
@@ -103,18 +129,18 @@ class Cell {
    */
   template <typename T>
   StatusOr<T> decode_big_endian_integer() const {
-    return google::cloud::internal::DecodeBigEndian<T>(value_);
+    return google::cloud::internal::DecodeBigEndian<T>(std::string(value_));
   }
 
   /// Return the labels applied to this cell by label transformer read filters.
   std::vector<std::string> const& labels() const { return labels_; }
 
  private:
-  std::string row_key_;
+  absl::Cord row_key_;
   std::string family_name_;
-  std::string column_qualifier_;
+  absl::Cord column_qualifier_;
   std::int64_t timestamp_;
-  std::string value_;
+  absl::Cord value_;
   std::vector<std::string> labels_;
 };
 
