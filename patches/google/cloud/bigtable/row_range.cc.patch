diff --git a/google/cloud/bigtable/row_range.cc b/google/cloud/bigtable/row_range.cc
index f3a635d..2d96e9a 100644
--- a/google/cloud/bigtable/row_range.cc
+++ b/google/cloud/bigtable/row_range.cc
@@ -35,13 +35,26 @@ inline bool Consecutive(std::string const& a, std::string const& b) {
   return b.compare(0, a.length(), a) == 0;
 }
 
+/// Returns true iff `a < b` and there is no Cord `c` such that `a < c < b`.
+inline bool Consecutive(absl::Cord const& a, absl::Cord const& b) {
+  // The only way for two strings to be consecutive is for the
+  // second to be equal to the first with an appended zero char.
+  if (b.size() != a.size() + 1) {
+    return false;
+  }
+  if (!b.EndsWith(std::string("\0", 1))) {
+    return false;
+  }
+  return b.StartsWith(a);
+}
+
 }  // anonymous namespace
 
 bool RowRange::IsEmpty() const {
-  std::string unused;
+  absl::Cord unused;
   // We do not want to copy the strings unnecessarily, so initialize a reference
   // pointing to *_key_closed() or *_key_open(), as needed.
-  std::string const* start = &unused;
+  absl::Cord const* start = &unused;
   bool start_open = false;
   switch (row_range_.start_key_case()) {
     case btproto::RowRange::kStartKeyClosed:
@@ -56,7 +69,7 @@ bool RowRange::IsEmpty() const {
   }
   // We need to initialize this to something to make g++ happy, but it cannot
   // be a value that is discarded in all switch() cases to make Clang happy.
-  std::string const* end = &row_range_.end_key_closed();
+  absl::Cord const* end = &row_range_.end_key_closed();
   bool end_open = false;
   switch (row_range_.end_key_case()) {
     case btproto::RowRange::kEndKeyClosed:
@@ -77,18 +90,18 @@ bool RowRange::IsEmpty() const {
   }
 
   // Compare the strings as byte vectors (careful with unsigned chars).
-  int cmp = start->compare(*end);
+  int cmp = start->CompareTo(*end);
   if (cmp == 0) {
     return start_open || end_open;
   }
   return cmp > 0;
 }
 
-bool RowRange::Contains(std::string const& key) const {
+bool RowRange::Contains(absl::Cord const& key) const {
   return !BelowStart(key) && !AboveEnd(key);
 }
 
-bool RowRange::BelowStart(std::string const& key) const {
+bool RowRange::BelowStart(absl::Cord const& key) const {
   switch (row_range_.start_key_case()) {
     case btproto::RowRange::START_KEY_NOT_SET:
       break;
@@ -100,7 +113,7 @@ bool RowRange::BelowStart(std::string const& key) const {
   return false;
 }
 
-bool RowRange::AboveEnd(std::string const& key) const {
+bool RowRange::AboveEnd(absl::Cord const& key) const {
   switch (row_range_.end_key_case()) {
     case btproto::RowRange::END_KEY_NOT_SET:
       break;
