// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/container/v1/cluster_service.proto

#include "google/cloud/container/cluster_manager_connection.h"
#include "google/cloud/container/cluster_manager_options.h"
#include "google/cloud/container/internal/cluster_manager_option_defaults.h"
#include "google/cloud/container/internal/cluster_manager_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace container {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ClusterManagerConnection::~ClusterManagerConnection() = default;

StatusOr<google::container::v1::ListClustersResponse>
ClusterManagerConnection::ListClusters(
    google::container::v1::ListClustersRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Cluster> ClusterManagerConnection::GetCluster(
    google::container::v1::GetClusterRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::CreateCluster(
    google::container::v1::CreateClusterRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::UpdateCluster(
    google::container::v1::UpdateClusterRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::UpdateNodePool(
    google::container::v1::UpdateNodePoolRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetNodePoolAutoscaling(
    google::container::v1::SetNodePoolAutoscalingRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetLoggingService(
    google::container::v1::SetLoggingServiceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetMonitoringService(
    google::container::v1::SetMonitoringServiceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetAddonsConfig(
    google::container::v1::SetAddonsConfigRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetLocations(
    google::container::v1::SetLocationsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::UpdateMaster(
    google::container::v1::UpdateMasterRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetMasterAuth(
    google::container::v1::SetMasterAuthRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::DeleteCluster(
    google::container::v1::DeleteClusterRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::ListOperationsResponse>
ClusterManagerConnection::ListOperations(
    google::container::v1::ListOperationsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::GetOperation(
    google::container::v1::GetOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ClusterManagerConnection::CancelOperation(
    google::container::v1::CancelOperationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::ServerConfig>
ClusterManagerConnection::GetServerConfig(
    google::container::v1::GetServerConfigRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::GetJSONWebKeysResponse>
ClusterManagerConnection::GetJSONWebKeys(
    google::container::v1::GetJSONWebKeysRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::ListNodePoolsResponse>
ClusterManagerConnection::ListNodePools(
    google::container::v1::ListNodePoolsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::NodePool> ClusterManagerConnection::GetNodePool(
    google::container::v1::GetNodePoolRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::CreateNodePool(
    google::container::v1::CreateNodePoolRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::DeleteNodePool(
    google::container::v1::DeleteNodePoolRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::RollbackNodePoolUpgrade(
    google::container::v1::RollbackNodePoolUpgradeRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetNodePoolManagement(
    google::container::v1::SetNodePoolManagementRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation> ClusterManagerConnection::SetLabels(
    google::container::v1::SetLabelsRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetLegacyAbac(
    google::container::v1::SetLegacyAbacRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::StartIPRotation(
    google::container::v1::StartIPRotationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::CompleteIPRotation(
    google::container::v1::CompleteIPRotationRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetNodePoolSize(
    google::container::v1::SetNodePoolSizeRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetNetworkPolicy(
    google::container::v1::SetNetworkPolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::container::v1::Operation>
ClusterManagerConnection::SetMaintenancePolicy(
    google::container::v1::SetMaintenancePolicyRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::container::v1::UsableSubnetwork>
ClusterManagerConnection::ListUsableSubnetworks(
    google::container::v1::ListUsableSubnetworksRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::container::v1::UsableSubnetwork>>(
      std::move(request),
      [](google::container::v1::ListUsableSubnetworksRequest const&) {
        return StatusOr<google::container::v1::ListUsableSubnetworksResponse>{};
      },
      [](google::container::v1::ListUsableSubnetworksResponse const&) {
        return std::vector<google::container::v1::UsableSubnetwork>();
      });
}

namespace {
class ClusterManagerConnectionImpl : public ClusterManagerConnection {
 public:
  ClusterManagerConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<container_internal::ClusterManagerStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<ClusterManagerRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<ClusterManagerBackoffPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<ClusterManagerConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~ClusterManagerConnectionImpl() override = default;

  StatusOr<google::container::v1::ListClustersResponse> ListClusters(
      google::container::v1::ListClustersRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->ListClusters(request),
        [this](grpc::ClientContext& context,
               google::container::v1::ListClustersRequest const& request) {
          return stub_->ListClusters(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Cluster> GetCluster(
      google::container::v1::GetClusterRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetCluster(request),
        [this](grpc::ClientContext& context,
               google::container::v1::GetClusterRequest const& request) {
          return stub_->GetCluster(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> CreateCluster(
      google::container::v1::CreateClusterRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateCluster(request),
        [this](grpc::ClientContext& context,
               google::container::v1::CreateClusterRequest const& request) {
          return stub_->CreateCluster(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> UpdateCluster(
      google::container::v1::UpdateClusterRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateCluster(request),
        [this](grpc::ClientContext& context,
               google::container::v1::UpdateClusterRequest const& request) {
          return stub_->UpdateCluster(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> UpdateNodePool(
      google::container::v1::UpdateNodePoolRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateNodePool(request),
        [this](grpc::ClientContext& context,
               google::container::v1::UpdateNodePoolRequest const& request) {
          return stub_->UpdateNodePool(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetNodePoolAutoscaling(
      google::container::v1::SetNodePoolAutoscalingRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetNodePoolAutoscaling(request),
        [this](grpc::ClientContext& context,
               google::container::v1::SetNodePoolAutoscalingRequest const&
                   request) {
          return stub_->SetNodePoolAutoscaling(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetLoggingService(
      google::container::v1::SetLoggingServiceRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetLoggingService(request),
        [this](grpc::ClientContext& context,
               google::container::v1::SetLoggingServiceRequest const& request) {
          return stub_->SetLoggingService(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetMonitoringService(
      google::container::v1::SetMonitoringServiceRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetMonitoringService(request),
        [this](
            grpc::ClientContext& context,
            google::container::v1::SetMonitoringServiceRequest const& request) {
          return stub_->SetMonitoringService(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetAddonsConfig(
      google::container::v1::SetAddonsConfigRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetAddonsConfig(request),
        [this](grpc::ClientContext& context,
               google::container::v1::SetAddonsConfigRequest const& request) {
          return stub_->SetAddonsConfig(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetLocations(
      google::container::v1::SetLocationsRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetLocations(request),
        [this](grpc::ClientContext& context,
               google::container::v1::SetLocationsRequest const& request) {
          return stub_->SetLocations(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> UpdateMaster(
      google::container::v1::UpdateMasterRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateMaster(request),
        [this](grpc::ClientContext& context,
               google::container::v1::UpdateMasterRequest const& request) {
          return stub_->UpdateMaster(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetMasterAuth(
      google::container::v1::SetMasterAuthRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetMasterAuth(request),
        [this](grpc::ClientContext& context,
               google::container::v1::SetMasterAuthRequest const& request) {
          return stub_->SetMasterAuth(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> DeleteCluster(
      google::container::v1::DeleteClusterRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteCluster(request),
        [this](grpc::ClientContext& context,
               google::container::v1::DeleteClusterRequest const& request) {
          return stub_->DeleteCluster(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::ListOperationsResponse> ListOperations(
      google::container::v1::ListOperationsRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->ListOperations(request),
        [this](grpc::ClientContext& context,
               google::container::v1::ListOperationsRequest const& request) {
          return stub_->ListOperations(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> GetOperation(
      google::container::v1::GetOperationRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetOperation(request),
        [this](grpc::ClientContext& context,
               google::container::v1::GetOperationRequest const& request) {
          return stub_->GetOperation(context, request);
        },
        request, __func__);
  }

  Status CancelOperation(
      google::container::v1::CancelOperationRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CancelOperation(request),
        [this](grpc::ClientContext& context,
               google::container::v1::CancelOperationRequest const& request) {
          return stub_->CancelOperation(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::ServerConfig> GetServerConfig(
      google::container::v1::GetServerConfigRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetServerConfig(request),
        [this](grpc::ClientContext& context,
               google::container::v1::GetServerConfigRequest const& request) {
          return stub_->GetServerConfig(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::GetJSONWebKeysResponse> GetJSONWebKeys(
      google::container::v1::GetJSONWebKeysRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetJSONWebKeys(request),
        [this](grpc::ClientContext& context,
               google::container::v1::GetJSONWebKeysRequest const& request) {
          return stub_->GetJSONWebKeys(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::ListNodePoolsResponse> ListNodePools(
      google::container::v1::ListNodePoolsRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->ListNodePools(request),
        [this](grpc::ClientContext& context,
               google::container::v1::ListNodePoolsRequest const& request) {
          return stub_->ListNodePools(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::NodePool> GetNodePool(
      google::container::v1::GetNodePoolRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetNodePool(request),
        [this](grpc::ClientContext& context,
               google::container::v1::GetNodePoolRequest const& request) {
          return stub_->GetNodePool(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> CreateNodePool(
      google::container::v1::CreateNodePoolRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateNodePool(request),
        [this](grpc::ClientContext& context,
               google::container::v1::CreateNodePoolRequest const& request) {
          return stub_->CreateNodePool(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> DeleteNodePool(
      google::container::v1::DeleteNodePoolRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteNodePool(request),
        [this](grpc::ClientContext& context,
               google::container::v1::DeleteNodePoolRequest const& request) {
          return stub_->DeleteNodePool(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> RollbackNodePoolUpgrade(
      google::container::v1::RollbackNodePoolUpgradeRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->RollbackNodePoolUpgrade(request),
        [this](grpc::ClientContext& context,
               google::container::v1::RollbackNodePoolUpgradeRequest const&
                   request) {
          return stub_->RollbackNodePoolUpgrade(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetNodePoolManagement(
      google::container::v1::SetNodePoolManagementRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetNodePoolManagement(request),
        [this](grpc::ClientContext& context,
               google::container::v1::SetNodePoolManagementRequest const&
                   request) {
          return stub_->SetNodePoolManagement(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetLabels(
      google::container::v1::SetLabelsRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetLabels(request),
        [this](grpc::ClientContext& context,
               google::container::v1::SetLabelsRequest const& request) {
          return stub_->SetLabels(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetLegacyAbac(
      google::container::v1::SetLegacyAbacRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetLegacyAbac(request),
        [this](grpc::ClientContext& context,
               google::container::v1::SetLegacyAbacRequest const& request) {
          return stub_->SetLegacyAbac(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> StartIPRotation(
      google::container::v1::StartIPRotationRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->StartIPRotation(request),
        [this](grpc::ClientContext& context,
               google::container::v1::StartIPRotationRequest const& request) {
          return stub_->StartIPRotation(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> CompleteIPRotation(
      google::container::v1::CompleteIPRotationRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CompleteIPRotation(request),
        [this](
            grpc::ClientContext& context,
            google::container::v1::CompleteIPRotationRequest const& request) {
          return stub_->CompleteIPRotation(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetNodePoolSize(
      google::container::v1::SetNodePoolSizeRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetNodePoolSize(request),
        [this](grpc::ClientContext& context,
               google::container::v1::SetNodePoolSizeRequest const& request) {
          return stub_->SetNodePoolSize(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetNetworkPolicy(
      google::container::v1::SetNetworkPolicyRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetNetworkPolicy(request),
        [this](grpc::ClientContext& context,
               google::container::v1::SetNetworkPolicyRequest const& request) {
          return stub_->SetNetworkPolicy(context, request);
        },
        request, __func__);
  }

  StatusOr<google::container::v1::Operation> SetMaintenancePolicy(
      google::container::v1::SetMaintenancePolicyRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetMaintenancePolicy(request),
        [this](
            grpc::ClientContext& context,
            google::container::v1::SetMaintenancePolicyRequest const& request) {
          return stub_->SetMaintenancePolicy(context, request);
        },
        request, __func__);
  }

  StreamRange<google::container::v1::UsableSubnetwork> ListUsableSubnetworks(
      google::container::v1::ListUsableSubnetworksRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<ClusterManagerRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListUsableSubnetworks(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::container::v1::UsableSubnetwork>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::container::v1::ListUsableSubnetworksRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::container::v1::ListUsableSubnetworksRequest const&
                         request) {
                return stub->ListUsableSubnetworks(context, request);
              },
              r, function_name);
        },
        [](google::container::v1::ListUsableSubnetworksResponse r) {
          std::vector<google::container::v1::UsableSubnetwork> result(
              r.subnetworks().size());
          auto& messages = *r.mutable_subnetworks();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<container_internal::ClusterManagerStub> stub_;
  std::unique_ptr<ClusterManagerRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<ClusterManagerConnectionIdempotencyPolicy>
      idempotency_policy_;
};
}  // namespace

std::shared_ptr<ClusterManagerConnection> MakeClusterManagerConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 ClusterManagerPolicyOptionList>(options,
                                                                 __func__);
  options =
      container_internal::ClusterManagerDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = container_internal::CreateDefaultClusterManagerStub(
      background->cq(), options);
  return std::make_shared<ClusterManagerConnectionImpl>(
      std::move(background), std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace container
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace container_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<container::ClusterManagerConnection>
MakeClusterManagerConnection(std::shared_ptr<ClusterManagerStub> stub,
                             Options options) {
  options = ClusterManagerDefaultOptions(std::move(options));
  return std::make_shared<container::ClusterManagerConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace container_internal
}  // namespace cloud
}  // namespace google
