// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/gkehub/v1/service.proto

#include "google/cloud/gkehub/gke_hub_connection.h"
#include "google/cloud/gkehub/gke_hub_options.h"
#include "google/cloud/gkehub/internal/gke_hub_option_defaults.h"
#include "google/cloud/gkehub/internal/gke_hub_stub_factory.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace gkehub {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

GkeHubConnection::~GkeHubConnection() = default;

StreamRange<google::cloud::gkehub::v1::Membership>
GkeHubConnection::ListMemberships(
    google::cloud::gkehub::v1::ListMembershipsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::gkehub::v1::Membership>>(
      std::move(request),
      [](google::cloud::gkehub::v1::ListMembershipsRequest const&) {
        return StatusOr<google::cloud::gkehub::v1::ListMembershipsResponse>{};
      },
      [](google::cloud::gkehub::v1::ListMembershipsResponse const&) {
        return std::vector<google::cloud::gkehub::v1::Membership>();
      });
}

StreamRange<google::cloud::gkehub::v1::Feature> GkeHubConnection::ListFeatures(
    google::cloud::gkehub::v1::ListFeaturesRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::gkehub::v1::Feature>>(
      std::move(request),
      [](google::cloud::gkehub::v1::ListFeaturesRequest const&) {
        return StatusOr<google::cloud::gkehub::v1::ListFeaturesResponse>{};
      },
      [](google::cloud::gkehub::v1::ListFeaturesResponse const&) {
        return std::vector<google::cloud::gkehub::v1::Feature>();
      });
}

StatusOr<google::cloud::gkehub::v1::Membership> GkeHubConnection::GetMembership(
    google::cloud::gkehub::v1::GetMembershipRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::gkehub::v1::Feature> GkeHubConnection::GetFeature(
    google::cloud::gkehub::v1::GetFeatureRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::gkehub::v1::Membership>>
GkeHubConnection::CreateMembership(
    google::cloud::gkehub::v1::CreateMembershipRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::gkehub::v1::Membership>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::gkehub::v1::Feature>>
GkeHubConnection::CreateFeature(
    google::cloud::gkehub::v1::CreateFeatureRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::gkehub::v1::Feature>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::gkehub::v1::OperationMetadata>>
GkeHubConnection::DeleteMembership(
    google::cloud::gkehub::v1::DeleteMembershipRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::gkehub::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::gkehub::v1::OperationMetadata>>
GkeHubConnection::DeleteFeature(
    google::cloud::gkehub::v1::DeleteFeatureRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::gkehub::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::gkehub::v1::Membership>>
GkeHubConnection::UpdateMembership(
    google::cloud::gkehub::v1::UpdateMembershipRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::gkehub::v1::Membership>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::gkehub::v1::Feature>>
GkeHubConnection::UpdateFeature(
    google::cloud::gkehub::v1::UpdateFeatureRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::gkehub::v1::Feature>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::cloud::gkehub::v1::GenerateConnectManifestResponse>
GkeHubConnection::GenerateConnectManifest(
    google::cloud::gkehub::v1::GenerateConnectManifestRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

namespace {
class GkeHubConnectionImpl : public GkeHubConnection {
 public:
  GkeHubConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<gkehub_internal::GkeHubStub> stub, Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<GkeHubRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<GkeHubBackoffPolicyOption>()->clone()),
        polling_policy_prototype_(
            options.get<GkeHubPollingPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<GkeHubConnectionIdempotencyPolicyOption>()->clone()) {}

  ~GkeHubConnectionImpl() override = default;

  StreamRange<google::cloud::gkehub::v1::Membership> ListMemberships(
      google::cloud::gkehub::v1::ListMembershipsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<GkeHubRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListMemberships(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::gkehub::v1::Membership>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::gkehub::v1::ListMembershipsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::gkehub::v1::ListMembershipsRequest const&
                         request) {
                return stub->ListMemberships(context, request);
              },
              r, function_name);
        },
        [](google::cloud::gkehub::v1::ListMembershipsResponse r) {
          std::vector<google::cloud::gkehub::v1::Membership> result(
              r.resources().size());
          auto& messages = *r.mutable_resources();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StreamRange<google::cloud::gkehub::v1::Feature> ListFeatures(
      google::cloud::gkehub::v1::ListFeaturesRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<GkeHubRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListFeatures(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::gkehub::v1::Feature>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::gkehub::v1::ListFeaturesRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::gkehub::v1::ListFeaturesRequest const&
                         request) {
                return stub->ListFeatures(context, request);
              },
              r, function_name);
        },
        [](google::cloud::gkehub::v1::ListFeaturesResponse r) {
          std::vector<google::cloud::gkehub::v1::Feature> result(
              r.resources().size());
          auto& messages = *r.mutable_resources();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::gkehub::v1::Membership> GetMembership(
      google::cloud::gkehub::v1::GetMembershipRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetMembership(request),
        [this](grpc::ClientContext& context,
               google::cloud::gkehub::v1::GetMembershipRequest const& request) {
          return stub_->GetMembership(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::gkehub::v1::Feature> GetFeature(
      google::cloud::gkehub::v1::GetFeatureRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetFeature(request),
        [this](grpc::ClientContext& context,
               google::cloud::gkehub::v1::GetFeatureRequest const& request) {
          return stub_->GetFeature(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::gkehub::v1::Membership>> CreateMembership(
      google::cloud::gkehub::v1::CreateMembershipRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::gkehub::v1::Membership>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::gkehub::v1::CreateMembershipRequest const& request) {
          return stub->AsyncCreateMembership(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::gkehub::v1::Membership>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateMembership(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::gkehub::v1::Feature>> CreateFeature(
      google::cloud::gkehub::v1::CreateFeatureRequest const& request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::gkehub::v1::Feature>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::gkehub::v1::CreateFeatureRequest const& request) {
          return stub->AsyncCreateFeature(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::gkehub::v1::Feature>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateFeature(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::gkehub::v1::OperationMetadata>>
  DeleteMembership(google::cloud::gkehub::v1::DeleteMembershipRequest const&
                       request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::gkehub::v1::OperationMetadata>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::gkehub::v1::DeleteMembershipRequest const& request) {
          return stub->AsyncDeleteMembership(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::cloud::gkehub::v1::OperationMetadata>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteMembership(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::gkehub::v1::OperationMetadata>> DeleteFeature(
      google::cloud::gkehub::v1::DeleteFeatureRequest const& request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::gkehub::v1::OperationMetadata>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::gkehub::v1::DeleteFeatureRequest const& request) {
          return stub->AsyncDeleteFeature(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultMetadata<
            google::cloud::gkehub::v1::OperationMetadata>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteFeature(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::gkehub::v1::Membership>> UpdateMembership(
      google::cloud::gkehub::v1::UpdateMembershipRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::gkehub::v1::Membership>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::gkehub::v1::UpdateMembershipRequest const& request) {
          return stub->AsyncUpdateMembership(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::gkehub::v1::Membership>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateMembership(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::gkehub::v1::Feature>> UpdateFeature(
      google::cloud::gkehub::v1::UpdateFeatureRequest const& request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::gkehub::v1::Feature>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::gkehub::v1::UpdateFeatureRequest const& request) {
          return stub->AsyncUpdateFeature(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::gkehub::v1::Feature>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateFeature(request),
        polling_policy_prototype_->clone(), __func__);
  }

  StatusOr<google::cloud::gkehub::v1::GenerateConnectManifestResponse>
  GenerateConnectManifest(
      google::cloud::gkehub::v1::GenerateConnectManifestRequest const& request)
      override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GenerateConnectManifest(request),
        [this](grpc::ClientContext& context,
               google::cloud::gkehub::v1::GenerateConnectManifestRequest const&
                   request) {
          return stub_->GenerateConnectManifest(context, request);
        },
        request, __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<gkehub_internal::GkeHubStub> stub_;
  std::unique_ptr<GkeHubRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<PollingPolicy const> polling_policy_prototype_;
  std::unique_ptr<GkeHubConnectionIdempotencyPolicy> idempotency_policy_;
};
}  // namespace

std::shared_ptr<GkeHubConnection> MakeGkeHubConnection(Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 GkeHubPolicyOptionList>(options, __func__);
  options = gkehub_internal::GkeHubDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub =
      gkehub_internal::CreateDefaultGkeHubStub(background->cq(), options);
  return std::make_shared<GkeHubConnectionImpl>(std::move(background),
                                                std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gkehub
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace gkehub_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<gkehub::GkeHubConnection> MakeGkeHubConnection(
    std::shared_ptr<GkeHubStub> stub, Options options) {
  options = GkeHubDefaultOptions(std::move(options));
  return std::make_shared<gkehub::GkeHubConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace gkehub_internal
}  // namespace cloud
}  // namespace google
