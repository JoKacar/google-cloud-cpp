// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/retail/v2/product_service.proto

#include "google/cloud/retail/product_connection.h"
#include "google/cloud/retail/internal/product_option_defaults.h"
#include "google/cloud/retail/internal/product_stub_factory.h"
#include "google/cloud/retail/product_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace retail {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ProductServiceConnection::~ProductServiceConnection() = default;

StatusOr<google::cloud::retail::v2::Product>
ProductServiceConnection::CreateProduct(
    google::cloud::retail::v2::CreateProductRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StatusOr<google::cloud::retail::v2::Product>
ProductServiceConnection::GetProduct(
    google::cloud::retail::v2::GetProductRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

StreamRange<google::cloud::retail::v2::Product>
ProductServiceConnection::ListProducts(
    google::cloud::retail::v2::ListProductsRequest request) {
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::retail::v2::Product>>(
      std::move(request),
      [](google::cloud::retail::v2::ListProductsRequest const&) {
        return StatusOr<google::cloud::retail::v2::ListProductsResponse>{};
      },
      [](google::cloud::retail::v2::ListProductsResponse const&) {
        return std::vector<google::cloud::retail::v2::Product>();
      });
}

StatusOr<google::cloud::retail::v2::Product>
ProductServiceConnection::UpdateProduct(
    google::cloud::retail::v2::UpdateProductRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

Status ProductServiceConnection::DeleteProduct(
    google::cloud::retail::v2::DeleteProductRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

future<StatusOr<google::cloud::retail::v2::ImportProductsResponse>>
ProductServiceConnection::ImportProducts(
    google::cloud::retail::v2::ImportProductsRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::retail::v2::ImportProductsResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::retail::v2::SetInventoryResponse>>
ProductServiceConnection::SetInventory(
    google::cloud::retail::v2::SetInventoryRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::retail::v2::SetInventoryResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::retail::v2::AddFulfillmentPlacesResponse>>
ProductServiceConnection::AddFulfillmentPlaces(
    google::cloud::retail::v2::AddFulfillmentPlacesRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::retail::v2::AddFulfillmentPlacesResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::retail::v2::RemoveFulfillmentPlacesResponse>>
ProductServiceConnection::RemoveFulfillmentPlaces(
    google::cloud::retail::v2::RemoveFulfillmentPlacesRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::retail::v2::RemoveFulfillmentPlacesResponse>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

namespace {
class ProductServiceConnectionImpl : public ProductServiceConnection {
 public:
  ProductServiceConnectionImpl(
      std::unique_ptr<google::cloud::BackgroundThreads> background,
      std::shared_ptr<retail_internal::ProductServiceStub> stub,
      Options const& options)
      : background_(std::move(background)),
        stub_(std::move(stub)),
        retry_policy_prototype_(
            options.get<ProductServiceRetryPolicyOption>()->clone()),
        backoff_policy_prototype_(
            options.get<ProductServiceBackoffPolicyOption>()->clone()),
        polling_policy_prototype_(
            options.get<ProductServicePollingPolicyOption>()->clone()),
        idempotency_policy_(
            options.get<ProductServiceConnectionIdempotencyPolicyOption>()
                ->clone()) {}

  ~ProductServiceConnectionImpl() override = default;

  StatusOr<google::cloud::retail::v2::Product> CreateProduct(
      google::cloud::retail::v2::CreateProductRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->CreateProduct(request),
        [this](grpc::ClientContext& context,
               google::cloud::retail::v2::CreateProductRequest const& request) {
          return stub_->CreateProduct(context, request);
        },
        request, __func__);
  }

  StatusOr<google::cloud::retail::v2::Product> GetProduct(
      google::cloud::retail::v2::GetProductRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->GetProduct(request),
        [this](grpc::ClientContext& context,
               google::cloud::retail::v2::GetProductRequest const& request) {
          return stub_->GetProduct(context, request);
        },
        request, __func__);
  }

  StreamRange<google::cloud::retail::v2::Product> ListProducts(
      google::cloud::retail::v2::ListProductsRequest request) override {
    request.clear_page_token();
    auto stub = stub_;
    auto retry = std::shared_ptr<ProductServiceRetryPolicy const>(
        retry_policy_prototype_->clone());
    auto backoff = std::shared_ptr<BackoffPolicy const>(
        backoff_policy_prototype_->clone());
    auto idempotency = idempotency_policy_->ListProducts(request);
    char const* function_name = __func__;
    return google::cloud::internal::MakePaginationRange<
        StreamRange<google::cloud::retail::v2::Product>>(
        std::move(request),
        [stub, retry, backoff, idempotency, function_name](
            google::cloud::retail::v2::ListProductsRequest const& r) {
          return google::cloud::internal::RetryLoop(
              retry->clone(), backoff->clone(), idempotency,
              [stub](grpc::ClientContext& context,
                     google::cloud::retail::v2::ListProductsRequest const&
                         request) {
                return stub->ListProducts(context, request);
              },
              r, function_name);
        },
        [](google::cloud::retail::v2::ListProductsResponse r) {
          std::vector<google::cloud::retail::v2::Product> result(
              r.products().size());
          auto& messages = *r.mutable_products();
          std::move(messages.begin(), messages.end(), result.begin());
          return result;
        });
  }

  StatusOr<google::cloud::retail::v2::Product> UpdateProduct(
      google::cloud::retail::v2::UpdateProductRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->UpdateProduct(request),
        [this](grpc::ClientContext& context,
               google::cloud::retail::v2::UpdateProductRequest const& request) {
          return stub_->UpdateProduct(context, request);
        },
        request, __func__);
  }

  Status DeleteProduct(
      google::cloud::retail::v2::DeleteProductRequest const& request) override {
    return google::cloud::internal::RetryLoop(
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->DeleteProduct(request),
        [this](grpc::ClientContext& context,
               google::cloud::retail::v2::DeleteProductRequest const& request) {
          return stub_->DeleteProduct(context, request);
        },
        request, __func__);
  }

  future<StatusOr<google::cloud::retail::v2::ImportProductsResponse>>
  ImportProducts(google::cloud::retail::v2::ImportProductsRequest const&
                     request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::retail::v2::ImportProductsResponse>(
        background_->cq(), request,
        [stub](
            google::cloud::CompletionQueue& cq,
            std::unique_ptr<grpc::ClientContext> context,
            google::cloud::retail::v2::ImportProductsRequest const& request) {
          return stub->AsyncImportProducts(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::retail::v2::ImportProductsResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->ImportProducts(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::retail::v2::SetInventoryResponse>>
  SetInventory(
      google::cloud::retail::v2::SetInventoryRequest const& request) override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::retail::v2::SetInventoryResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::retail::v2::SetInventoryRequest const& request) {
          return stub->AsyncSetInventory(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::retail::v2::SetInventoryResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->SetInventory(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::retail::v2::AddFulfillmentPlacesResponse>>
  AddFulfillmentPlaces(
      google::cloud::retail::v2::AddFulfillmentPlacesRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::retail::v2::AddFulfillmentPlacesResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::retail::v2::AddFulfillmentPlacesRequest const&
                   request) {
          return stub->AsyncAddFulfillmentPlaces(cq, std::move(context),
                                                 request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::retail::v2::AddFulfillmentPlacesResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->AddFulfillmentPlaces(request),
        polling_policy_prototype_->clone(), __func__);
  }

  future<StatusOr<google::cloud::retail::v2::RemoveFulfillmentPlacesResponse>>
  RemoveFulfillmentPlaces(
      google::cloud::retail::v2::RemoveFulfillmentPlacesRequest const& request)
      override {
    auto stub = stub_;
    return google::cloud::internal::AsyncLongRunningOperation<
        google::cloud::retail::v2::RemoveFulfillmentPlacesResponse>(
        background_->cq(), request,
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::cloud::retail::v2::RemoveFulfillmentPlacesRequest const&
                   request) {
          return stub->AsyncRemoveFulfillmentPlaces(cq, std::move(context),
                                                    request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::GetOperationRequest const& request) {
          return stub->AsyncGetOperation(cq, std::move(context), request);
        },
        [stub](google::cloud::CompletionQueue& cq,
               std::unique_ptr<grpc::ClientContext> context,
               google::longrunning::CancelOperationRequest const& request) {
          return stub->AsyncCancelOperation(cq, std::move(context), request);
        },
        &google::cloud::internal::ExtractLongRunningResultResponse<
            google::cloud::retail::v2::RemoveFulfillmentPlacesResponse>,
        retry_policy_prototype_->clone(), backoff_policy_prototype_->clone(),
        idempotency_policy_->RemoveFulfillmentPlaces(request),
        polling_policy_prototype_->clone(), __func__);
  }

 private:
  std::unique_ptr<google::cloud::BackgroundThreads> background_;
  std::shared_ptr<retail_internal::ProductServiceStub> stub_;
  std::unique_ptr<ProductServiceRetryPolicy const> retry_policy_prototype_;
  std::unique_ptr<BackoffPolicy const> backoff_policy_prototype_;
  std::unique_ptr<PollingPolicy const> polling_policy_prototype_;
  std::unique_ptr<ProductServiceConnectionIdempotencyPolicy>
      idempotency_policy_;
};
}  // namespace

std::shared_ptr<ProductServiceConnection> MakeProductServiceConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 ProductServicePolicyOptionList>(options,
                                                                 __func__);
  options = retail_internal::ProductServiceDefaultOptions(std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = retail_internal::CreateDefaultProductServiceStub(background->cq(),
                                                               options);
  return std::make_shared<ProductServiceConnectionImpl>(
      std::move(background), std::move(stub), options);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace retail
}  // namespace cloud
}  // namespace google

namespace google {
namespace cloud {
namespace retail_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

std::shared_ptr<retail::ProductServiceConnection> MakeProductServiceConnection(
    std::shared_ptr<ProductServiceStub> stub, Options options) {
  options = ProductServiceDefaultOptions(std::move(options));
  return std::make_shared<retail::ProductServiceConnectionImpl>(
      internal::MakeBackgroundThreadsFactory(options)(), std::move(stub),
      std::move(options));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace retail_internal
}  // namespace cloud
}  // namespace google
