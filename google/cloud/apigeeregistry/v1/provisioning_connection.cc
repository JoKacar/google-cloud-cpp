// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apigeeregistry/v1/provisioning_service.proto

#include "google/cloud/apigeeregistry/v1/provisioning_connection.h"
#include "google/cloud/apigeeregistry/v1/internal/provisioning_connection_impl.h"
#include "google/cloud/apigeeregistry/v1/internal/provisioning_option_defaults.h"
#include "google/cloud/apigeeregistry/v1/internal/provisioning_stub_factory.h"
#include "google/cloud/apigeeregistry/v1/internal/provisioning_tracing_connection.h"
#include "google/cloud/apigeeregistry/v1/provisioning_options.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/grpc_options.h"
#include <memory>

namespace google {
namespace cloud {
namespace apigeeregistry_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ProvisioningConnection::~ProvisioningConnection() = default;

future<StatusOr<google::cloud::apigeeregistry::v1::Instance>>
ProvisioningConnection::CreateInstance(
    google::cloud::apigeeregistry::v1::CreateInstanceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::apigeeregistry::v1::Instance>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

future<StatusOr<google::cloud::apigeeregistry::v1::OperationMetadata>>
ProvisioningConnection::DeleteInstance(
    google::cloud::apigeeregistry::v1::DeleteInstanceRequest const&) {
  return google::cloud::make_ready_future<
      StatusOr<google::cloud::apigeeregistry::v1::OperationMetadata>>(
      Status(StatusCode::kUnimplemented, "not implemented"));
}

StatusOr<google::cloud::apigeeregistry::v1::Instance>
ProvisioningConnection::GetInstance(
    google::cloud::apigeeregistry::v1::GetInstanceRequest const&) {
  return Status(StatusCode::kUnimplemented, "not implemented");
}

std::shared_ptr<ProvisioningConnection> MakeProvisioningConnection(
    Options options) {
  internal::CheckExpectedOptions<CommonOptionList, GrpcOptionList,
                                 UnifiedCredentialsOptionList,
                                 ProvisioningPolicyOptionList>(options,
                                                               __func__);
  options = apigeeregistry_v1_internal::ProvisioningDefaultOptions(
      std::move(options));
  auto background = internal::MakeBackgroundThreadsFactory(options)();
  auto stub = apigeeregistry_v1_internal::CreateDefaultProvisioningStub(
      background->cq(), options);
  return apigeeregistry_v1_internal::MakeProvisioningTracingConnection(
      std::make_shared<apigeeregistry_v1_internal::ProvisioningConnectionImpl>(
          std::move(background), std::move(stub), std::move(options)));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apigeeregistry_v1
}  // namespace cloud
}  // namespace google
