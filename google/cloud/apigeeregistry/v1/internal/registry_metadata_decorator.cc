// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apigeeregistry/v1/registry_service.proto

#include "google/cloud/apigeeregistry/v1/internal/registry_metadata_decorator.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/api_client_header.h"
#include "google/cloud/internal/url_encode.h"
#include "google/cloud/status_or.h"
#include <google/cloud/apigeeregistry/v1/registry_service.grpc.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace apigeeregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegistryMetadata::RegistryMetadata(
    std::shared_ptr<RegistryStub> child,
    std::multimap<std::string, std::string> fixed_metadata,
    std::string api_client_header)
    : child_(std::move(child)),
      fixed_metadata_(std::move(fixed_metadata)),
      api_client_header_(
          api_client_header.empty()
              ? google::cloud::internal::GeneratedLibClientHeader()
              : std::move(api_client_header)) {}

StatusOr<google::cloud::apigeeregistry::v1::ListApisResponse>
RegistryMetadata::ListApis(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApisRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListApis(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::Api> RegistryMetadata::GetApi(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetApiRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetApi(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::Api> RegistryMetadata::CreateApi(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::CreateApiRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateApi(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::Api> RegistryMetadata::UpdateApi(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::UpdateApiRequest const& request) {
  SetMetadata(
      context, internal::CurrentOptions(),
      absl::StrCat("api.name=", internal::UrlEncode(request.api().name())));
  return child_->UpdateApi(context, request);
}

Status RegistryMetadata::DeleteApi(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteApi(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ListApiVersionsResponse>
RegistryMetadata::ListApiVersions(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApiVersionsRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListApiVersions(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryMetadata::GetApiVersion(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetApiVersionRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetApiVersion(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryMetadata::CreateApiVersion(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::CreateApiVersionRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateApiVersion(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryMetadata::UpdateApiVersion(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::UpdateApiVersionRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("api_version.name=",
                           internal::UrlEncode(request.api_version().name())));
  return child_->UpdateApiVersion(context, request);
}

Status RegistryMetadata::DeleteApiVersion(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiVersionRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteApiVersion(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ListApiSpecsResponse>
RegistryMetadata::ListApiSpecs(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApiSpecsRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListApiSpecs(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryMetadata::GetApiSpec(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetApiSpecRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetApiSpec(context, request);
}

StatusOr<google::api::HttpBody> RegistryMetadata::GetApiSpecContents(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetApiSpecContentsRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetApiSpecContents(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryMetadata::CreateApiSpec(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::CreateApiSpecRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateApiSpec(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryMetadata::UpdateApiSpec(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::UpdateApiSpecRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("api_spec.name=",
                           internal::UrlEncode(request.api_spec().name())));
  return child_->UpdateApiSpec(context, request);
}

Status RegistryMetadata::DeleteApiSpec(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiSpecRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteApiSpec(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryMetadata::TagApiSpecRevision(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::TagApiSpecRevisionRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->TagApiSpecRevision(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ListApiSpecRevisionsResponse>
RegistryMetadata::ListApiSpecRevisions(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApiSpecRevisionsRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ListApiSpecRevisions(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryMetadata::RollbackApiSpec(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::RollbackApiSpecRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->RollbackApiSpec(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryMetadata::DeleteApiSpecRevision(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiSpecRevisionRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteApiSpecRevision(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ListApiDeploymentsResponse>
RegistryMetadata::ListApiDeployments(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApiDeploymentsRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListApiDeployments(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryMetadata::GetApiDeployment(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetApiDeploymentRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetApiDeployment(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryMetadata::CreateApiDeployment(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::CreateApiDeploymentRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateApiDeployment(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryMetadata::UpdateApiDeployment(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::UpdateApiDeploymentRequest const&
        request) {
  SetMetadata(
      context, internal::CurrentOptions(),
      absl::StrCat("api_deployment.name=",
                   internal::UrlEncode(request.api_deployment().name())));
  return child_->UpdateApiDeployment(context, request);
}

Status RegistryMetadata::DeleteApiDeployment(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiDeploymentRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteApiDeployment(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryMetadata::TagApiDeploymentRevision(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::TagApiDeploymentRevisionRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->TagApiDeploymentRevision(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ListApiDeploymentRevisionsResponse>
RegistryMetadata::ListApiDeploymentRevisions(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApiDeploymentRevisionsRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->ListApiDeploymentRevisions(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryMetadata::RollbackApiDeployment(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::RollbackApiDeploymentRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->RollbackApiDeployment(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryMetadata::DeleteApiDeploymentRevision(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiDeploymentRevisionRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteApiDeploymentRevision(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::ListArtifactsResponse>
RegistryMetadata::ListArtifacts(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListArtifactsRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->ListArtifacts(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryMetadata::GetArtifact(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetArtifactRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetArtifact(context, request);
}

StatusOr<google::api::HttpBody> RegistryMetadata::GetArtifactContents(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetArtifactContentsRequest const&
        request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->GetArtifactContents(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryMetadata::CreateArtifact(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::CreateArtifactRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("parent=", internal::UrlEncode(request.parent())));
  return child_->CreateArtifact(context, request);
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryMetadata::ReplaceArtifact(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ReplaceArtifactRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("artifact.name=",
                           internal::UrlEncode(request.artifact().name())));
  return child_->ReplaceArtifact(context, request);
}

Status RegistryMetadata::DeleteArtifact(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteArtifactRequest const& request) {
  SetMetadata(context, internal::CurrentOptions(),
              absl::StrCat("name=", internal::UrlEncode(request.name())));
  return child_->DeleteArtifact(context, request);
}

void RegistryMetadata::SetMetadata(grpc::ClientContext& context,
                                   Options const& options,
                                   std::string const& request_params) {
  context.AddMetadata("x-goog-request-params", request_params);
  SetMetadata(context, options);
}

void RegistryMetadata::SetMetadata(grpc::ClientContext& context,
                                   Options const& options) {
  for (auto const& kv : fixed_metadata_) {
    context.AddMetadata(kv.first, kv.second);
  }
  context.AddMetadata("x-goog-api-client", api_client_header_);
  if (options.has<UserProjectOption>()) {
    context.AddMetadata("x-goog-user-project",
                        options.get<UserProjectOption>());
  }
  auto const& authority = options.get<AuthorityOption>();
  if (!authority.empty()) context.set_authority(authority);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apigeeregistry_v1_internal
}  // namespace cloud
}  // namespace google
