// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apigeeregistry/v1/registry_service.proto

#include "google/cloud/apigeeregistry/v1/internal/registry_stub.h"
#include "google/cloud/grpc_error_delegate.h"
#include "google/cloud/status_or.h"
#include <google/cloud/apigeeregistry/v1/registry_service.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace apigeeregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegistryStub::~RegistryStub() = default;

StatusOr<google::cloud::apigeeregistry::v1::ListApisResponse>
DefaultRegistryStub::ListApis(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApisRequest const& request) {
  google::cloud::apigeeregistry::v1::ListApisResponse response;
  auto status = grpc_stub_->ListApis(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::Api> DefaultRegistryStub::GetApi(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetApiRequest const& request) {
  google::cloud::apigeeregistry::v1::Api response;
  auto status = grpc_stub_->GetApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::Api> DefaultRegistryStub::CreateApi(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::CreateApiRequest const& request) {
  google::cloud::apigeeregistry::v1::Api response;
  auto status = grpc_stub_->CreateApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::Api> DefaultRegistryStub::UpdateApi(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::UpdateApiRequest const& request) {
  google::cloud::apigeeregistry::v1::Api response;
  auto status = grpc_stub_->UpdateApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultRegistryStub::DeleteApi(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteApi(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::apigeeregistry::v1::ListApiVersionsResponse>
DefaultRegistryStub::ListApiVersions(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApiVersionsRequest const& request) {
  google::cloud::apigeeregistry::v1::ListApiVersionsResponse response;
  auto status = grpc_stub_->ListApiVersions(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
DefaultRegistryStub::GetApiVersion(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetApiVersionRequest const& request) {
  google::cloud::apigeeregistry::v1::ApiVersion response;
  auto status = grpc_stub_->GetApiVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
DefaultRegistryStub::CreateApiVersion(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::CreateApiVersionRequest const& request) {
  google::cloud::apigeeregistry::v1::ApiVersion response;
  auto status = grpc_stub_->CreateApiVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
DefaultRegistryStub::UpdateApiVersion(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::UpdateApiVersionRequest const& request) {
  google::cloud::apigeeregistry::v1::ApiVersion response;
  auto status = grpc_stub_->UpdateApiVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultRegistryStub::DeleteApiVersion(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiVersionRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteApiVersion(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::apigeeregistry::v1::ListApiSpecsResponse>
DefaultRegistryStub::ListApiSpecs(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApiSpecsRequest const& request) {
  google::cloud::apigeeregistry::v1::ListApiSpecsResponse response;
  auto status = grpc_stub_->ListApiSpecs(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
DefaultRegistryStub::GetApiSpec(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetApiSpecRequest const& request) {
  google::cloud::apigeeregistry::v1::ApiSpec response;
  auto status = grpc_stub_->GetApiSpec(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody> DefaultRegistryStub::GetApiSpecContents(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetApiSpecContentsRequest const&
        request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->GetApiSpecContents(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
DefaultRegistryStub::CreateApiSpec(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::CreateApiSpecRequest const& request) {
  google::cloud::apigeeregistry::v1::ApiSpec response;
  auto status = grpc_stub_->CreateApiSpec(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
DefaultRegistryStub::UpdateApiSpec(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::UpdateApiSpecRequest const& request) {
  google::cloud::apigeeregistry::v1::ApiSpec response;
  auto status = grpc_stub_->UpdateApiSpec(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultRegistryStub::DeleteApiSpec(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiSpecRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteApiSpec(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
DefaultRegistryStub::TagApiSpecRevision(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::TagApiSpecRevisionRequest const&
        request) {
  google::cloud::apigeeregistry::v1::ApiSpec response;
  auto status = grpc_stub_->TagApiSpecRevision(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ListApiSpecRevisionsResponse>
DefaultRegistryStub::ListApiSpecRevisions(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApiSpecRevisionsRequest const&
        request) {
  google::cloud::apigeeregistry::v1::ListApiSpecRevisionsResponse response;
  auto status = grpc_stub_->ListApiSpecRevisions(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
DefaultRegistryStub::RollbackApiSpec(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::RollbackApiSpecRequest const& request) {
  google::cloud::apigeeregistry::v1::ApiSpec response;
  auto status = grpc_stub_->RollbackApiSpec(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
DefaultRegistryStub::DeleteApiSpecRevision(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiSpecRevisionRequest const&
        request) {
  google::cloud::apigeeregistry::v1::ApiSpec response;
  auto status = grpc_stub_->DeleteApiSpecRevision(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ListApiDeploymentsResponse>
DefaultRegistryStub::ListApiDeployments(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApiDeploymentsRequest const&
        request) {
  google::cloud::apigeeregistry::v1::ListApiDeploymentsResponse response;
  auto status = grpc_stub_->ListApiDeployments(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
DefaultRegistryStub::GetApiDeployment(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetApiDeploymentRequest const& request) {
  google::cloud::apigeeregistry::v1::ApiDeployment response;
  auto status = grpc_stub_->GetApiDeployment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
DefaultRegistryStub::CreateApiDeployment(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::CreateApiDeploymentRequest const&
        request) {
  google::cloud::apigeeregistry::v1::ApiDeployment response;
  auto status = grpc_stub_->CreateApiDeployment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
DefaultRegistryStub::UpdateApiDeployment(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::UpdateApiDeploymentRequest const&
        request) {
  google::cloud::apigeeregistry::v1::ApiDeployment response;
  auto status = grpc_stub_->UpdateApiDeployment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultRegistryStub::DeleteApiDeployment(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiDeploymentRequest const&
        request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteApiDeployment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
DefaultRegistryStub::TagApiDeploymentRevision(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::TagApiDeploymentRevisionRequest const&
        request) {
  google::cloud::apigeeregistry::v1::ApiDeployment response;
  auto status =
      grpc_stub_->TagApiDeploymentRevision(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ListApiDeploymentRevisionsResponse>
DefaultRegistryStub::ListApiDeploymentRevisions(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListApiDeploymentRevisionsRequest const&
        request) {
  google::cloud::apigeeregistry::v1::ListApiDeploymentRevisionsResponse
      response;
  auto status =
      grpc_stub_->ListApiDeploymentRevisions(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
DefaultRegistryStub::RollbackApiDeployment(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::RollbackApiDeploymentRequest const&
        request) {
  google::cloud::apigeeregistry::v1::ApiDeployment response;
  auto status = grpc_stub_->RollbackApiDeployment(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
DefaultRegistryStub::DeleteApiDeploymentRevision(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteApiDeploymentRevisionRequest const&
        request) {
  google::cloud::apigeeregistry::v1::ApiDeployment response;
  auto status =
      grpc_stub_->DeleteApiDeploymentRevision(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::ListArtifactsResponse>
DefaultRegistryStub::ListArtifacts(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ListArtifactsRequest const& request) {
  google::cloud::apigeeregistry::v1::ListArtifactsResponse response;
  auto status = grpc_stub_->ListArtifacts(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
DefaultRegistryStub::GetArtifact(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetArtifactRequest const& request) {
  google::cloud::apigeeregistry::v1::Artifact response;
  auto status = grpc_stub_->GetArtifact(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::api::HttpBody> DefaultRegistryStub::GetArtifactContents(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::GetArtifactContentsRequest const&
        request) {
  google::api::HttpBody response;
  auto status = grpc_stub_->GetArtifactContents(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
DefaultRegistryStub::CreateArtifact(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::CreateArtifactRequest const& request) {
  google::cloud::apigeeregistry::v1::Artifact response;
  auto status = grpc_stub_->CreateArtifact(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
DefaultRegistryStub::ReplaceArtifact(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::ReplaceArtifactRequest const& request) {
  google::cloud::apigeeregistry::v1::Artifact response;
  auto status = grpc_stub_->ReplaceArtifact(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return response;
}

Status DefaultRegistryStub::DeleteArtifact(
    grpc::ClientContext& context,
    google::cloud::apigeeregistry::v1::DeleteArtifactRequest const& request) {
  google::protobuf::Empty response;
  auto status = grpc_stub_->DeleteArtifact(&context, request, &response);
  if (!status.ok()) {
    return google::cloud::MakeStatusFromRpcError(status);
  }
  return google::cloud::Status();
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apigeeregistry_v1_internal
}  // namespace cloud
}  // namespace google
