// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apigeeregistry/v1/registry_service.proto

#include "google/cloud/apigeeregistry/v1/internal/registry_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include "google/cloud/internal/traced_stream_range.h"
#include <memory>

namespace google {
namespace cloud {
namespace apigeeregistry_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

RegistryTracingConnection::RegistryTracingConnection(
    std::shared_ptr<apigeeregistry_v1::RegistryConnection> child)
    : child_(std::move(child)) {}

StreamRange<google::cloud::apigeeregistry::v1::Api>
RegistryTracingConnection::ListApis(
    google::cloud::apigeeregistry::v1::ListApisRequest request) {
  auto span =
      internal::MakeSpan("apigeeregistry_v1::RegistryConnection::ListApis");
  internal::OTelScope scope(span);
  auto sr = child_->ListApis(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::apigeeregistry::v1::Api>(std::move(span), std::move(sr));
}

StatusOr<google::cloud::apigeeregistry::v1::Api>
RegistryTracingConnection::GetApi(
    google::cloud::apigeeregistry::v1::GetApiRequest const& request) {
  auto span =
      internal::MakeSpan("apigeeregistry_v1::RegistryConnection::GetApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetApi(request));
}

StatusOr<google::cloud::apigeeregistry::v1::Api>
RegistryTracingConnection::CreateApi(
    google::cloud::apigeeregistry::v1::CreateApiRequest const& request) {
  auto span =
      internal::MakeSpan("apigeeregistry_v1::RegistryConnection::CreateApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateApi(request));
}

StatusOr<google::cloud::apigeeregistry::v1::Api>
RegistryTracingConnection::UpdateApi(
    google::cloud::apigeeregistry::v1::UpdateApiRequest const& request) {
  auto span =
      internal::MakeSpan("apigeeregistry_v1::RegistryConnection::UpdateApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateApi(request));
}

Status RegistryTracingConnection::DeleteApi(
    google::cloud::apigeeregistry::v1::DeleteApiRequest const& request) {
  auto span =
      internal::MakeSpan("apigeeregistry_v1::RegistryConnection::DeleteApi");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteApi(request));
}

StreamRange<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryTracingConnection::ListApiVersions(
    google::cloud::apigeeregistry::v1::ListApiVersionsRequest request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::ListApiVersions");
  internal::OTelScope scope(span);
  auto sr = child_->ListApiVersions(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::apigeeregistry::v1::ApiVersion>(std::move(span),
                                                     std::move(sr));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryTracingConnection::GetApiVersion(
    google::cloud::apigeeregistry::v1::GetApiVersionRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::GetApiVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetApiVersion(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryTracingConnection::CreateApiVersion(
    google::cloud::apigeeregistry::v1::CreateApiVersionRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::CreateApiVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateApiVersion(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryTracingConnection::UpdateApiVersion(
    google::cloud::apigeeregistry::v1::UpdateApiVersionRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::UpdateApiVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateApiVersion(request));
}

Status RegistryTracingConnection::DeleteApiVersion(
    google::cloud::apigeeregistry::v1::DeleteApiVersionRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::DeleteApiVersion");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteApiVersion(request));
}

StreamRange<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryTracingConnection::ListApiSpecs(
    google::cloud::apigeeregistry::v1::ListApiSpecsRequest request) {
  auto span =
      internal::MakeSpan("apigeeregistry_v1::RegistryConnection::ListApiSpecs");
  internal::OTelScope scope(span);
  auto sr = child_->ListApiSpecs(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::apigeeregistry::v1::ApiSpec>(std::move(span),
                                                  std::move(sr));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryTracingConnection::GetApiSpec(
    google::cloud::apigeeregistry::v1::GetApiSpecRequest const& request) {
  auto span =
      internal::MakeSpan("apigeeregistry_v1::RegistryConnection::GetApiSpec");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetApiSpec(request));
}

StatusOr<google::api::HttpBody> RegistryTracingConnection::GetApiSpecContents(
    google::cloud::apigeeregistry::v1::GetApiSpecContentsRequest const&
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::GetApiSpecContents");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetApiSpecContents(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryTracingConnection::CreateApiSpec(
    google::cloud::apigeeregistry::v1::CreateApiSpecRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::CreateApiSpec");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateApiSpec(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryTracingConnection::UpdateApiSpec(
    google::cloud::apigeeregistry::v1::UpdateApiSpecRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::UpdateApiSpec");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateApiSpec(request));
}

Status RegistryTracingConnection::DeleteApiSpec(
    google::cloud::apigeeregistry::v1::DeleteApiSpecRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::DeleteApiSpec");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteApiSpec(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryTracingConnection::TagApiSpecRevision(
    google::cloud::apigeeregistry::v1::TagApiSpecRevisionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::TagApiSpecRevision");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->TagApiSpecRevision(request));
}

StreamRange<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryTracingConnection::ListApiSpecRevisions(
    google::cloud::apigeeregistry::v1::ListApiSpecRevisionsRequest request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::ListApiSpecRevisions");
  internal::OTelScope scope(span);
  auto sr = child_->ListApiSpecRevisions(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::apigeeregistry::v1::ApiSpec>(std::move(span),
                                                  std::move(sr));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryTracingConnection::RollbackApiSpec(
    google::cloud::apigeeregistry::v1::RollbackApiSpecRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::RollbackApiSpec");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->RollbackApiSpec(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryTracingConnection::DeleteApiSpecRevision(
    google::cloud::apigeeregistry::v1::DeleteApiSpecRevisionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::DeleteApiSpecRevision");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteApiSpecRevision(request));
}

StreamRange<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryTracingConnection::ListApiDeployments(
    google::cloud::apigeeregistry::v1::ListApiDeploymentsRequest request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::ListApiDeployments");
  internal::OTelScope scope(span);
  auto sr = child_->ListApiDeployments(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::apigeeregistry::v1::ApiDeployment>(std::move(span),
                                                        std::move(sr));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryTracingConnection::GetApiDeployment(
    google::cloud::apigeeregistry::v1::GetApiDeploymentRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::GetApiDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetApiDeployment(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryTracingConnection::CreateApiDeployment(
    google::cloud::apigeeregistry::v1::CreateApiDeploymentRequest const&
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::CreateApiDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateApiDeployment(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryTracingConnection::UpdateApiDeployment(
    google::cloud::apigeeregistry::v1::UpdateApiDeploymentRequest const&
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::UpdateApiDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateApiDeployment(request));
}

Status RegistryTracingConnection::DeleteApiDeployment(
    google::cloud::apigeeregistry::v1::DeleteApiDeploymentRequest const&
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::DeleteApiDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteApiDeployment(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryTracingConnection::TagApiDeploymentRevision(
    google::cloud::apigeeregistry::v1::TagApiDeploymentRevisionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::TagApiDeploymentRevision");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->TagApiDeploymentRevision(request));
}

StreamRange<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryTracingConnection::ListApiDeploymentRevisions(
    google::cloud::apigeeregistry::v1::ListApiDeploymentRevisionsRequest
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::ListApiDeploymentRevisions");
  internal::OTelScope scope(span);
  auto sr = child_->ListApiDeploymentRevisions(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::apigeeregistry::v1::ApiDeployment>(std::move(span),
                                                        std::move(sr));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryTracingConnection::RollbackApiDeployment(
    google::cloud::apigeeregistry::v1::RollbackApiDeploymentRequest const&
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::RollbackApiDeployment");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->RollbackApiDeployment(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryTracingConnection::DeleteApiDeploymentRevision(
    google::cloud::apigeeregistry::v1::DeleteApiDeploymentRevisionRequest const&
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::DeleteApiDeploymentRevision");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteApiDeploymentRevision(request));
}

StreamRange<google::cloud::apigeeregistry::v1::Artifact>
RegistryTracingConnection::ListArtifacts(
    google::cloud::apigeeregistry::v1::ListArtifactsRequest request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::ListArtifacts");
  internal::OTelScope scope(span);
  auto sr = child_->ListArtifacts(std::move(request));
  return internal::MakeTracedStreamRange<
      google::cloud::apigeeregistry::v1::Artifact>(std::move(span),
                                                   std::move(sr));
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryTracingConnection::GetArtifact(
    google::cloud::apigeeregistry::v1::GetArtifactRequest const& request) {
  auto span =
      internal::MakeSpan("apigeeregistry_v1::RegistryConnection::GetArtifact");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetArtifact(request));
}

StatusOr<google::api::HttpBody> RegistryTracingConnection::GetArtifactContents(
    google::cloud::apigeeregistry::v1::GetArtifactContentsRequest const&
        request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::GetArtifactContents");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetArtifactContents(request));
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryTracingConnection::CreateArtifact(
    google::cloud::apigeeregistry::v1::CreateArtifactRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::CreateArtifact");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->CreateArtifact(request));
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryTracingConnection::ReplaceArtifact(
    google::cloud::apigeeregistry::v1::ReplaceArtifactRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::ReplaceArtifact");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ReplaceArtifact(request));
}

Status RegistryTracingConnection::DeleteArtifact(
    google::cloud::apigeeregistry::v1::DeleteArtifactRequest const& request) {
  auto span = internal::MakeSpan(
      "apigeeregistry_v1::RegistryConnection::DeleteArtifact");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteArtifact(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<apigeeregistry_v1::RegistryConnection>
MakeRegistryTracingConnection(
    std::shared_ptr<apigeeregistry_v1::RegistryConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<RegistryTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apigeeregistry_v1_internal
}  // namespace cloud
}  // namespace google
