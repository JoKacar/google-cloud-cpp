// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/apigeeregistry/v1/registry_service.proto

#include "google/cloud/apigeeregistry/v1/registry_client.h"
#include <memory>

namespace google {
namespace cloud {
namespace apigeeregistry_v1 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RegistryClient::RegistryClient(std::shared_ptr<RegistryConnection> connection,
                               Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
RegistryClient::~RegistryClient() = default;

StreamRange<google::cloud::apigeeregistry::v1::Api> RegistryClient::ListApis(
    std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::ListApisRequest request;
  request.set_parent(parent);
  return connection_->ListApis(request);
}

StreamRange<google::cloud::apigeeregistry::v1::Api> RegistryClient::ListApis(
    google::cloud::apigeeregistry::v1::ListApisRequest request, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListApis(std::move(request));
}

StatusOr<google::cloud::apigeeregistry::v1::Api> RegistryClient::GetApi(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::GetApiRequest request;
  request.set_name(name);
  return connection_->GetApi(request);
}

StatusOr<google::cloud::apigeeregistry::v1::Api> RegistryClient::GetApi(
    google::cloud::apigeeregistry::v1::GetApiRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetApi(request);
}

StatusOr<google::cloud::apigeeregistry::v1::Api> RegistryClient::CreateApi(
    std::string const& parent,
    google::cloud::apigeeregistry::v1::Api const& api,
    std::string const& api_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::CreateApiRequest request;
  request.set_parent(parent);
  *request.mutable_api() = api;
  request.set_api_id(api_id);
  return connection_->CreateApi(request);
}

StatusOr<google::cloud::apigeeregistry::v1::Api> RegistryClient::CreateApi(
    google::cloud::apigeeregistry::v1::CreateApiRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateApi(request);
}

StatusOr<google::cloud::apigeeregistry::v1::Api> RegistryClient::UpdateApi(
    google::cloud::apigeeregistry::v1::Api const& api,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::UpdateApiRequest request;
  *request.mutable_api() = api;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateApi(request);
}

StatusOr<google::cloud::apigeeregistry::v1::Api> RegistryClient::UpdateApi(
    google::cloud::apigeeregistry::v1::UpdateApiRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateApi(request);
}

Status RegistryClient::DeleteApi(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::DeleteApiRequest request;
  request.set_name(name);
  return connection_->DeleteApi(request);
}

Status RegistryClient::DeleteApi(
    google::cloud::apigeeregistry::v1::DeleteApiRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteApi(request);
}

StreamRange<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryClient::ListApiVersions(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::ListApiVersionsRequest request;
  request.set_parent(parent);
  return connection_->ListApiVersions(request);
}

StreamRange<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryClient::ListApiVersions(
    google::cloud::apigeeregistry::v1::ListApiVersionsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListApiVersions(std::move(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryClient::GetApiVersion(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::GetApiVersionRequest request;
  request.set_name(name);
  return connection_->GetApiVersion(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryClient::GetApiVersion(
    google::cloud::apigeeregistry::v1::GetApiVersionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetApiVersion(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryClient::CreateApiVersion(
    std::string const& parent,
    google::cloud::apigeeregistry::v1::ApiVersion const& api_version,
    std::string const& api_version_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::CreateApiVersionRequest request;
  request.set_parent(parent);
  *request.mutable_api_version() = api_version;
  request.set_api_version_id(api_version_id);
  return connection_->CreateApiVersion(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryClient::CreateApiVersion(
    google::cloud::apigeeregistry::v1::CreateApiVersionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateApiVersion(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryClient::UpdateApiVersion(
    google::cloud::apigeeregistry::v1::ApiVersion const& api_version,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::UpdateApiVersionRequest request;
  *request.mutable_api_version() = api_version;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateApiVersion(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiVersion>
RegistryClient::UpdateApiVersion(
    google::cloud::apigeeregistry::v1::UpdateApiVersionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateApiVersion(request);
}

Status RegistryClient::DeleteApiVersion(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::DeleteApiVersionRequest request;
  request.set_name(name);
  return connection_->DeleteApiVersion(request);
}

Status RegistryClient::DeleteApiVersion(
    google::cloud::apigeeregistry::v1::DeleteApiVersionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteApiVersion(request);
}

StreamRange<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::ListApiSpecs(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::ListApiSpecsRequest request;
  request.set_parent(parent);
  return connection_->ListApiSpecs(request);
}

StreamRange<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::ListApiSpecs(
    google::cloud::apigeeregistry::v1::ListApiSpecsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListApiSpecs(std::move(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec> RegistryClient::GetApiSpec(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::GetApiSpecRequest request;
  request.set_name(name);
  return connection_->GetApiSpec(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec> RegistryClient::GetApiSpec(
    google::cloud::apigeeregistry::v1::GetApiSpecRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetApiSpec(request);
}

StatusOr<google::api::HttpBody> RegistryClient::GetApiSpecContents(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::GetApiSpecContentsRequest request;
  request.set_name(name);
  return connection_->GetApiSpecContents(request);
}

StatusOr<google::api::HttpBody> RegistryClient::GetApiSpecContents(
    google::cloud::apigeeregistry::v1::GetApiSpecContentsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetApiSpecContents(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::CreateApiSpec(
    std::string const& parent,
    google::cloud::apigeeregistry::v1::ApiSpec const& api_spec,
    std::string const& api_spec_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::CreateApiSpecRequest request;
  request.set_parent(parent);
  *request.mutable_api_spec() = api_spec;
  request.set_api_spec_id(api_spec_id);
  return connection_->CreateApiSpec(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::CreateApiSpec(
    google::cloud::apigeeregistry::v1::CreateApiSpecRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateApiSpec(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::UpdateApiSpec(
    google::cloud::apigeeregistry::v1::ApiSpec const& api_spec,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::UpdateApiSpecRequest request;
  *request.mutable_api_spec() = api_spec;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateApiSpec(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::UpdateApiSpec(
    google::cloud::apigeeregistry::v1::UpdateApiSpecRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateApiSpec(request);
}

Status RegistryClient::DeleteApiSpec(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::DeleteApiSpecRequest request;
  request.set_name(name);
  return connection_->DeleteApiSpec(request);
}

Status RegistryClient::DeleteApiSpec(
    google::cloud::apigeeregistry::v1::DeleteApiSpecRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteApiSpec(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::TagApiSpecRevision(
    google::cloud::apigeeregistry::v1::TagApiSpecRevisionRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->TagApiSpecRevision(request);
}

StreamRange<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::ListApiSpecRevisions(
    google::cloud::apigeeregistry::v1::ListApiSpecRevisionsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListApiSpecRevisions(std::move(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::RollbackApiSpec(
    google::cloud::apigeeregistry::v1::RollbackApiSpecRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->RollbackApiSpec(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::DeleteApiSpecRevision(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::DeleteApiSpecRevisionRequest request;
  request.set_name(name);
  return connection_->DeleteApiSpecRevision(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiSpec>
RegistryClient::DeleteApiSpecRevision(
    google::cloud::apigeeregistry::v1::DeleteApiSpecRevisionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteApiSpecRevision(request);
}

StreamRange<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::ListApiDeployments(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::ListApiDeploymentsRequest request;
  request.set_parent(parent);
  return connection_->ListApiDeployments(request);
}

StreamRange<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::ListApiDeployments(
    google::cloud::apigeeregistry::v1::ListApiDeploymentsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListApiDeployments(std::move(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::GetApiDeployment(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::GetApiDeploymentRequest request;
  request.set_name(name);
  return connection_->GetApiDeployment(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::GetApiDeployment(
    google::cloud::apigeeregistry::v1::GetApiDeploymentRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetApiDeployment(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::CreateApiDeployment(
    std::string const& parent,
    google::cloud::apigeeregistry::v1::ApiDeployment const& api_deployment,
    std::string const& api_deployment_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::CreateApiDeploymentRequest request;
  request.set_parent(parent);
  *request.mutable_api_deployment() = api_deployment;
  request.set_api_deployment_id(api_deployment_id);
  return connection_->CreateApiDeployment(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::CreateApiDeployment(
    google::cloud::apigeeregistry::v1::CreateApiDeploymentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateApiDeployment(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::UpdateApiDeployment(
    google::cloud::apigeeregistry::v1::ApiDeployment const& api_deployment,
    google::protobuf::FieldMask const& update_mask, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::UpdateApiDeploymentRequest request;
  *request.mutable_api_deployment() = api_deployment;
  *request.mutable_update_mask() = update_mask;
  return connection_->UpdateApiDeployment(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::UpdateApiDeployment(
    google::cloud::apigeeregistry::v1::UpdateApiDeploymentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateApiDeployment(request);
}

Status RegistryClient::DeleteApiDeployment(std::string const& name,
                                           Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::DeleteApiDeploymentRequest request;
  request.set_name(name);
  return connection_->DeleteApiDeployment(request);
}

Status RegistryClient::DeleteApiDeployment(
    google::cloud::apigeeregistry::v1::DeleteApiDeploymentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteApiDeployment(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::TagApiDeploymentRevision(
    google::cloud::apigeeregistry::v1::TagApiDeploymentRevisionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->TagApiDeploymentRevision(request);
}

StreamRange<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::ListApiDeploymentRevisions(
    google::cloud::apigeeregistry::v1::ListApiDeploymentRevisionsRequest
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListApiDeploymentRevisions(std::move(request));
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::RollbackApiDeployment(
    google::cloud::apigeeregistry::v1::RollbackApiDeploymentRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->RollbackApiDeployment(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::DeleteApiDeploymentRevision(std::string const& name,
                                            Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::DeleteApiDeploymentRevisionRequest request;
  request.set_name(name);
  return connection_->DeleteApiDeploymentRevision(request);
}

StatusOr<google::cloud::apigeeregistry::v1::ApiDeployment>
RegistryClient::DeleteApiDeploymentRevision(
    google::cloud::apigeeregistry::v1::DeleteApiDeploymentRevisionRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteApiDeploymentRevision(request);
}

StreamRange<google::cloud::apigeeregistry::v1::Artifact>
RegistryClient::ListArtifacts(std::string const& parent, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::ListArtifactsRequest request;
  request.set_parent(parent);
  return connection_->ListArtifacts(request);
}

StreamRange<google::cloud::apigeeregistry::v1::Artifact>
RegistryClient::ListArtifacts(
    google::cloud::apigeeregistry::v1::ListArtifactsRequest request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListArtifacts(std::move(request));
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryClient::GetArtifact(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::GetArtifactRequest request;
  request.set_name(name);
  return connection_->GetArtifact(request);
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryClient::GetArtifact(
    google::cloud::apigeeregistry::v1::GetArtifactRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetArtifact(request);
}

StatusOr<google::api::HttpBody> RegistryClient::GetArtifactContents(
    std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::GetArtifactContentsRequest request;
  request.set_name(name);
  return connection_->GetArtifactContents(request);
}

StatusOr<google::api::HttpBody> RegistryClient::GetArtifactContents(
    google::cloud::apigeeregistry::v1::GetArtifactContentsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetArtifactContents(request);
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryClient::CreateArtifact(
    std::string const& parent,
    google::cloud::apigeeregistry::v1::Artifact const& artifact,
    std::string const& artifact_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::CreateArtifactRequest request;
  request.set_parent(parent);
  *request.mutable_artifact() = artifact;
  request.set_artifact_id(artifact_id);
  return connection_->CreateArtifact(request);
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryClient::CreateArtifact(
    google::cloud::apigeeregistry::v1::CreateArtifactRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->CreateArtifact(request);
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryClient::ReplaceArtifact(
    google::cloud::apigeeregistry::v1::Artifact const& artifact, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::ReplaceArtifactRequest request;
  *request.mutable_artifact() = artifact;
  return connection_->ReplaceArtifact(request);
}

StatusOr<google::cloud::apigeeregistry::v1::Artifact>
RegistryClient::ReplaceArtifact(
    google::cloud::apigeeregistry::v1::ReplaceArtifactRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ReplaceArtifact(request);
}

Status RegistryClient::DeleteArtifact(std::string const& name, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::apigeeregistry::v1::DeleteArtifactRequest request;
  request.set_name(name);
  return connection_->DeleteArtifact(request);
}

Status RegistryClient::DeleteArtifact(
    google::cloud::apigeeregistry::v1::DeleteArtifactRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteArtifact(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace apigeeregistry_v1
}  // namespace cloud
}  // namespace google
