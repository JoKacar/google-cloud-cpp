// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/admin/v1/iam.proto

#include "google/cloud/iam/internal/iam_rest_metadata_decorator.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/api_client_header.h"
#include "google/cloud/status_or.h"
//#include <google/iam/admin/v1/iam.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace iam_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

IAMRestMetadata::IAMRestMetadata(std::shared_ptr<IAMRestStub> child)
    : child_(std::move(child)),
      api_client_header_(
          google::cloud::internal::ApiClientHeader("generator")) {}

StatusOr<google::iam::admin::v1::ListServiceAccountsResponse>
IAMRestMetadata::ListServiceAccounts(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::ListServiceAccountsRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->ListServiceAccounts(rest_request, request);
}

StatusOr<google::iam::admin::v1::ServiceAccount>
IAMRestMetadata::GetServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::GetServiceAccountRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->GetServiceAccount(rest_request, request);
}

StatusOr<google::iam::admin::v1::ServiceAccount>
IAMRestMetadata::CreateServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::CreateServiceAccountRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->CreateServiceAccount(rest_request, request);
}

StatusOr<google::iam::admin::v1::ServiceAccount>
IAMRestMetadata::PatchServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::PatchServiceAccountRequest const& request) {
  SetMetadata(rest_request,
              "service_account.name=" + request.service_account().name());
  return child_->PatchServiceAccount(rest_request, request);
}

Status IAMRestMetadata::DeleteServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::DeleteServiceAccountRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->DeleteServiceAccount(rest_request, request);
}

StatusOr<google::iam::admin::v1::UndeleteServiceAccountResponse>
IAMRestMetadata::UndeleteServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::UndeleteServiceAccountRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->UndeleteServiceAccount(rest_request, request);
}

Status IAMRestMetadata::EnableServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::EnableServiceAccountRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->EnableServiceAccount(rest_request, request);
}

Status IAMRestMetadata::DisableServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::DisableServiceAccountRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->DisableServiceAccount(rest_request, request);
}

StatusOr<google::iam::admin::v1::ListServiceAccountKeysResponse>
IAMRestMetadata::ListServiceAccountKeys(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::ListServiceAccountKeysRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->ListServiceAccountKeys(rest_request, request);
}

StatusOr<google::iam::admin::v1::ServiceAccountKey>
IAMRestMetadata::GetServiceAccountKey(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::GetServiceAccountKeyRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->GetServiceAccountKey(rest_request, request);
}

StatusOr<google::iam::admin::v1::ServiceAccountKey>
IAMRestMetadata::CreateServiceAccountKey(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::CreateServiceAccountKeyRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->CreateServiceAccountKey(rest_request, request);
}

StatusOr<google::iam::admin::v1::ServiceAccountKey>
IAMRestMetadata::UploadServiceAccountKey(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::UploadServiceAccountKeyRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->UploadServiceAccountKey(rest_request, request);
}

Status IAMRestMetadata::DeleteServiceAccountKey(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::DeleteServiceAccountKeyRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->DeleteServiceAccountKey(rest_request, request);
}

StatusOr<google::iam::v1::Policy> IAMRestMetadata::GetIamPolicy(
    rest_internal::RestRequest& rest_request,
    google::iam::v1::GetIamPolicyRequest const& request) {
  SetMetadata(rest_request, "resource=" + request.resource());
  return child_->GetIamPolicy(rest_request, request);
}

StatusOr<google::iam::v1::Policy> IAMRestMetadata::SetIamPolicy(
    rest_internal::RestRequest& rest_request,
    google::iam::v1::SetIamPolicyRequest const& request) {
  SetMetadata(rest_request, "resource=" + request.resource());
  return child_->SetIamPolicy(rest_request, request);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
IAMRestMetadata::TestIamPermissions(
    rest_internal::RestRequest& rest_request,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  SetMetadata(rest_request, "resource=" + request.resource());
  return child_->TestIamPermissions(rest_request, request);
}

StatusOr<google::iam::admin::v1::QueryGrantableRolesResponse>
IAMRestMetadata::QueryGrantableRoles(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::QueryGrantableRolesRequest const& request) {
  SetMetadata(rest_request);
  return child_->QueryGrantableRoles(rest_request, request);
}

StatusOr<google::iam::admin::v1::ListRolesResponse> IAMRestMetadata::ListRoles(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::ListRolesRequest const& request) {
  SetMetadata(rest_request);
  return child_->ListRoles(rest_request, request);
}

StatusOr<google::iam::admin::v1::Role> IAMRestMetadata::GetRole(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::GetRoleRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->GetRole(rest_request, request);
}

StatusOr<google::iam::admin::v1::Role> IAMRestMetadata::CreateRole(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::CreateRoleRequest const& request) {
  SetMetadata(rest_request, "parent=" + request.parent());
  return child_->CreateRole(rest_request, request);
}

StatusOr<google::iam::admin::v1::Role> IAMRestMetadata::UpdateRole(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::UpdateRoleRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->UpdateRole(rest_request, request);
}

StatusOr<google::iam::admin::v1::Role> IAMRestMetadata::DeleteRole(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::DeleteRoleRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->DeleteRole(rest_request, request);
}

StatusOr<google::iam::admin::v1::Role> IAMRestMetadata::UndeleteRole(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::UndeleteRoleRequest const& request) {
  SetMetadata(rest_request, "name=" + request.name());
  return child_->UndeleteRole(rest_request, request);
}

StatusOr<google::iam::admin::v1::QueryTestablePermissionsResponse>
IAMRestMetadata::QueryTestablePermissions(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::QueryTestablePermissionsRequest const& request) {
  SetMetadata(rest_request);
  return child_->QueryTestablePermissions(rest_request, request);
}

StatusOr<google::iam::admin::v1::QueryAuditableServicesResponse>
IAMRestMetadata::QueryAuditableServices(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::QueryAuditableServicesRequest const& request) {
  SetMetadata(rest_request);
  return child_->QueryAuditableServices(rest_request, request);
}

StatusOr<google::iam::admin::v1::LintPolicyResponse>
IAMRestMetadata::LintPolicy(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::LintPolicyRequest const& request) {
  SetMetadata(rest_request);
  return child_->LintPolicy(rest_request, request);
}

void IAMRestMetadata::SetMetadata(rest_internal::RestRequest& rest_request,
                                  std::string const& request_params) {
  rest_request.AddHeader("x-goog-request-params", request_params);
}

void IAMRestMetadata::SetMetadata(rest_internal::RestRequest& rest_request) {
  rest_request.AddHeader("x-goog-api-client", api_client_header_);
  auto const& options = internal::CurrentOptions();
  if (options.has<UserProjectOption>()) {
    rest_request.AddHeader("x-goog-user-project",
                           options.get<UserProjectOption>());
  }
  // TODO(sdhart): Does REST need this?
  //  auto const& authority = options.get<AuthorityOption>();
  //  if (!authority.empty()) context.set_authority(authority);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
namespace gcpcxxV1 = GOOGLE_CLOUD_CPP_NS;  // NOLINT(misc-unused-alias-decls)
}  // namespace iam_internal
}  // namespace cloud
}  // namespace google
