// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/iam/admin/v1/iam.proto

#include "google/cloud/iam/internal/iam_rest_logging_decorator.h"
#include "google/cloud/internal/rest_log_wrapper.h"
#include "google/cloud/status_or.h"
//#include <google/iam/admin/v1/iam.grpc.pb.h>
#include <memory>

namespace google {
namespace cloud {
namespace iam_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

IAMRestLogging::IAMRestLogging(std::shared_ptr<IAMRestStub> child,
                               TracingOptions tracing_options,
                               std::set<std::string> components)
    : child_(std::move(child)),
      tracing_options_(std::move(tracing_options)),
      components_(std::move(components)) {
  for (auto const& c : components_) {
    std::cout << __PRETTY_FUNCTION__ << " component = " << c << std::endl;
  }
}

StatusOr<google::iam::admin::v1::ListServiceAccountsResponse>
IAMRestLogging::ListServiceAccounts(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::ListServiceAccountsRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](
          rest_internal::RestRequest& rest_request,
          google::iam::admin::v1::ListServiceAccountsRequest const& request) {
        return child_->ListServiceAccounts(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::ServiceAccount>
IAMRestLogging::GetServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::GetServiceAccountRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::GetServiceAccountRequest const& request) {
        return child_->GetServiceAccount(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::ServiceAccount>
IAMRestLogging::CreateServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::CreateServiceAccountRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](
          rest_internal::RestRequest& rest_request,
          google::iam::admin::v1::CreateServiceAccountRequest const& request) {
        return child_->CreateServiceAccount(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::ServiceAccount>
IAMRestLogging::PatchServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::PatchServiceAccountRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](
          rest_internal::RestRequest& rest_request,
          google::iam::admin::v1::PatchServiceAccountRequest const& request) {
        return child_->PatchServiceAccount(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

Status IAMRestLogging::DeleteServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::DeleteServiceAccountRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](
          rest_internal::RestRequest& rest_request,
          google::iam::admin::v1::DeleteServiceAccountRequest const& request) {
        return child_->DeleteServiceAccount(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::UndeleteServiceAccountResponse>
IAMRestLogging::UndeleteServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::UndeleteServiceAccountRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::UndeleteServiceAccountRequest const&
                 request) {
        return child_->UndeleteServiceAccount(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

Status IAMRestLogging::EnableServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::EnableServiceAccountRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](
          rest_internal::RestRequest& rest_request,
          google::iam::admin::v1::EnableServiceAccountRequest const& request) {
        return child_->EnableServiceAccount(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

Status IAMRestLogging::DisableServiceAccount(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::DisableServiceAccountRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](
          rest_internal::RestRequest& rest_request,
          google::iam::admin::v1::DisableServiceAccountRequest const& request) {
        return child_->DisableServiceAccount(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::ListServiceAccountKeysResponse>
IAMRestLogging::ListServiceAccountKeys(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::ListServiceAccountKeysRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::ListServiceAccountKeysRequest const&
                 request) {
        return child_->ListServiceAccountKeys(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::ServiceAccountKey>
IAMRestLogging::GetServiceAccountKey(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::GetServiceAccountKeyRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](
          rest_internal::RestRequest& rest_request,
          google::iam::admin::v1::GetServiceAccountKeyRequest const& request) {
        return child_->GetServiceAccountKey(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::ServiceAccountKey>
IAMRestLogging::CreateServiceAccountKey(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::CreateServiceAccountKeyRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::CreateServiceAccountKeyRequest const&
                 request) {
        return child_->CreateServiceAccountKey(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::ServiceAccountKey>
IAMRestLogging::UploadServiceAccountKey(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::UploadServiceAccountKeyRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::UploadServiceAccountKeyRequest const&
                 request) {
        return child_->UploadServiceAccountKey(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

Status IAMRestLogging::DeleteServiceAccountKey(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::DeleteServiceAccountKeyRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::DeleteServiceAccountKeyRequest const&
                 request) {
        return child_->DeleteServiceAccountKey(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::v1::Policy> IAMRestLogging::GetIamPolicy(
    rest_internal::RestRequest& rest_request,
    google::iam::v1::GetIamPolicyRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::v1::GetIamPolicyRequest const& request) {
        return child_->GetIamPolicy(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::v1::Policy> IAMRestLogging::SetIamPolicy(
    rest_internal::RestRequest& rest_request,
    google::iam::v1::SetIamPolicyRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::v1::SetIamPolicyRequest const& request) {
        return child_->SetIamPolicy(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::v1::TestIamPermissionsResponse>
IAMRestLogging::TestIamPermissions(
    rest_internal::RestRequest& rest_request,
    google::iam::v1::TestIamPermissionsRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::v1::TestIamPermissionsRequest const& request) {
        return child_->TestIamPermissions(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::QueryGrantableRolesResponse>
IAMRestLogging::QueryGrantableRoles(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::QueryGrantableRolesRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](
          rest_internal::RestRequest& rest_request,
          google::iam::admin::v1::QueryGrantableRolesRequest const& request) {
        return child_->QueryGrantableRoles(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::ListRolesResponse> IAMRestLogging::ListRoles(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::ListRolesRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::ListRolesRequest const& request) {
        return child_->ListRoles(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::Role> IAMRestLogging::GetRole(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::GetRoleRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::GetRoleRequest const& request) {
        return child_->GetRole(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::Role> IAMRestLogging::CreateRole(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::CreateRoleRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::CreateRoleRequest const& request) {
        return child_->CreateRole(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::Role> IAMRestLogging::UpdateRole(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::UpdateRoleRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::UpdateRoleRequest const& request) {
        return child_->UpdateRole(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::Role> IAMRestLogging::DeleteRole(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::DeleteRoleRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::DeleteRoleRequest const& request) {
        return child_->DeleteRole(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::Role> IAMRestLogging::UndeleteRole(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::UndeleteRoleRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::UndeleteRoleRequest const& request) {
        return child_->UndeleteRole(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::QueryTestablePermissionsResponse>
IAMRestLogging::QueryTestablePermissions(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::QueryTestablePermissionsRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::QueryTestablePermissionsRequest const&
                 request) {
        return child_->QueryTestablePermissions(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::QueryAuditableServicesResponse>
IAMRestLogging::QueryAuditableServices(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::QueryAuditableServicesRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::QueryAuditableServicesRequest const&
                 request) {
        return child_->QueryAuditableServices(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

StatusOr<google::iam::admin::v1::LintPolicyResponse> IAMRestLogging::LintPolicy(
    rest_internal::RestRequest& rest_request,
    google::iam::admin::v1::LintPolicyRequest const& request) {
  return google::cloud::internal::RestLogWrapper(
      [this](rest_internal::RestRequest& rest_request,
             google::iam::admin::v1::LintPolicyRequest const& request) {
        return child_->LintPolicy(rest_request, request);
      },
      rest_request, request, __func__, tracing_options_);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
namespace gcpcxxV1 = GOOGLE_CLOUD_CPP_NS;  // NOLINT(misc-unused-alias-decls)
}  // namespace iam_internal
}  // namespace cloud
}  // namespace google
