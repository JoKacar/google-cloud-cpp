// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/config/v1/config.proto

#include "google/cloud/config/v1/internal/config_connection_impl.h"
#include "google/cloud/config/v1/internal/config_option_defaults.h"
#include "google/cloud/background_threads.h"
#include "google/cloud/common_options.h"
#include "google/cloud/grpc_options.h"
#include "google/cloud/internal/async_long_running_operation.h"
#include "google/cloud/internal/pagination_range.h"
#include "google/cloud/internal/retry_loop.h"
#include <memory>

namespace google {
namespace cloud {
namespace config_v1_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

ConfigConnectionImpl::ConfigConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<config_v1_internal::ConfigStub> stub, Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      ConfigConnection::options())) {}

StreamRange<google::cloud::config::v1::Deployment>
ConfigConnectionImpl::ListDeployments(
    google::cloud::config::v1::ListDeploymentsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<config_v1::ConfigRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListDeployments(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::config::v1::Deployment>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::config::v1::ListDeploymentsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::config::v1::ListDeploymentsRequest const&
                       request) {
              return stub->ListDeployments(context, request);
            },
            r, function_name);
      },
      [](google::cloud::config::v1::ListDeploymentsResponse r) {
        std::vector<google::cloud::config::v1::Deployment> result(
            r.deployments().size());
        auto& messages = *r.mutable_deployments();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::config::v1::Deployment>
ConfigConnectionImpl::GetDeployment(
    google::cloud::config::v1::GetDeploymentRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetDeployment(request),
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::GetDeploymentRequest const& request) {
        return stub_->GetDeployment(context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::config::v1::Deployment>>
ConfigConnectionImpl::CreateDeployment(
    google::cloud::config::v1::CreateDeploymentRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::config::v1::Deployment>(
      background_->cq(), request,
      [stub](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::config::v1::CreateDeploymentRequest const& request) {
        return stub->AsyncCreateDeployment(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::config::v1::Deployment>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->CreateDeployment(request), polling_policy(),
      __func__);
}

future<StatusOr<google::cloud::config::v1::Deployment>>
ConfigConnectionImpl::UpdateDeployment(
    google::cloud::config::v1::UpdateDeploymentRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::config::v1::Deployment>(
      background_->cq(), request,
      [stub](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::config::v1::UpdateDeploymentRequest const& request) {
        return stub->AsyncUpdateDeployment(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::config::v1::Deployment>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->UpdateDeployment(request), polling_policy(),
      __func__);
}

future<StatusOr<google::cloud::config::v1::Deployment>>
ConfigConnectionImpl::DeleteDeployment(
    google::cloud::config::v1::DeleteDeploymentRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::config::v1::Deployment>(
      background_->cq(), request,
      [stub](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::config::v1::DeleteDeploymentRequest const& request) {
        return stub->AsyncDeleteDeployment(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::config::v1::Deployment>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteDeployment(request), polling_policy(),
      __func__);
}

StreamRange<google::cloud::config::v1::Revision>
ConfigConnectionImpl::ListRevisions(
    google::cloud::config::v1::ListRevisionsRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<config_v1::ConfigRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListRevisions(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::config::v1::Revision>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::config::v1::ListRevisionsRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::config::v1::ListRevisionsRequest const&
                       request) {
              return stub->ListRevisions(context, request);
            },
            r, function_name);
      },
      [](google::cloud::config::v1::ListRevisionsResponse r) {
        std::vector<google::cloud::config::v1::Revision> result(
            r.revisions().size());
        auto& messages = *r.mutable_revisions();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::config::v1::Revision> ConfigConnectionImpl::GetRevision(
    google::cloud::config::v1::GetRevisionRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetRevision(request),
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::GetRevisionRequest const& request) {
        return stub_->GetRevision(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::config::v1::Resource> ConfigConnectionImpl::GetResource(
    google::cloud::config::v1::GetResourceRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->GetResource(request),
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::GetResourceRequest const& request) {
        return stub_->GetResource(context, request);
      },
      request, __func__);
}

StreamRange<google::cloud::config::v1::Resource>
ConfigConnectionImpl::ListResources(
    google::cloud::config::v1::ListResourcesRequest request) {
  request.clear_page_token();
  auto& stub = stub_;
  auto retry =
      std::shared_ptr<config_v1::ConfigRetryPolicy const>(retry_policy());
  auto backoff = std::shared_ptr<BackoffPolicy const>(backoff_policy());
  auto idempotency = idempotency_policy()->ListResources(request);
  char const* function_name = __func__;
  return google::cloud::internal::MakePaginationRange<
      StreamRange<google::cloud::config::v1::Resource>>(
      std::move(request),
      [stub, retry, backoff, idempotency, function_name](
          google::cloud::config::v1::ListResourcesRequest const& r) {
        return google::cloud::internal::RetryLoop(
            retry->clone(), backoff->clone(), idempotency,
            [stub](grpc::ClientContext& context,
                   google::cloud::config::v1::ListResourcesRequest const&
                       request) {
              return stub->ListResources(context, request);
            },
            r, function_name);
      },
      [](google::cloud::config::v1::ListResourcesResponse r) {
        std::vector<google::cloud::config::v1::Resource> result(
            r.resources().size());
        auto& messages = *r.mutable_resources();
        std::move(messages.begin(), messages.end(), result.begin());
        return result;
      });
}

StatusOr<google::cloud::config::v1::Statefile>
ConfigConnectionImpl::ExportDeploymentStatefile(
    google::cloud::config::v1::ExportDeploymentStatefileRequest const&
        request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ExportDeploymentStatefile(request),
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ExportDeploymentStatefileRequest const&
                 request) {
        return stub_->ExportDeploymentStatefile(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::config::v1::Statefile>
ConfigConnectionImpl::ExportRevisionStatefile(
    google::cloud::config::v1::ExportRevisionStatefileRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ExportRevisionStatefile(request),
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ExportRevisionStatefileRequest const&
                 request) {
        return stub_->ExportRevisionStatefile(context, request);
      },
      request, __func__);
}

StatusOr<google::cloud::config::v1::Statefile>
ConfigConnectionImpl::ImportStatefile(
    google::cloud::config::v1::ImportStatefileRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ImportStatefile(request),
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ImportStatefileRequest const& request) {
        return stub_->ImportStatefile(context, request);
      },
      request, __func__);
}

Status ConfigConnectionImpl::DeleteStatefile(
    google::cloud::config::v1::DeleteStatefileRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->DeleteStatefile(request),
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::DeleteStatefileRequest const& request) {
        return stub_->DeleteStatefile(context, request);
      },
      request, __func__);
}

future<StatusOr<google::cloud::config::v1::Deployment>>
ConfigConnectionImpl::LockDeployment(
    google::cloud::config::v1::LockDeploymentRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::config::v1::Deployment>(
      background_->cq(), request,
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::cloud::config::v1::LockDeploymentRequest const& request) {
        return stub->AsyncLockDeployment(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::config::v1::Deployment>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->LockDeployment(request), polling_policy(),
      __func__);
}

future<StatusOr<google::cloud::config::v1::Deployment>>
ConfigConnectionImpl::UnlockDeployment(
    google::cloud::config::v1::UnlockDeploymentRequest const& request) {
  auto& stub = stub_;
  return google::cloud::internal::AsyncLongRunningOperation<
      google::cloud::config::v1::Deployment>(
      background_->cq(), request,
      [stub](
          google::cloud::CompletionQueue& cq,
          std::shared_ptr<grpc::ClientContext> context,
          google::cloud::config::v1::UnlockDeploymentRequest const& request) {
        return stub->AsyncUnlockDeployment(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::GetOperationRequest const& request) {
        return stub->AsyncGetOperation(cq, std::move(context), request);
      },
      [stub](google::cloud::CompletionQueue& cq,
             std::shared_ptr<grpc::ClientContext> context,
             google::longrunning::CancelOperationRequest const& request) {
        return stub->AsyncCancelOperation(cq, std::move(context), request);
      },
      &google::cloud::internal::ExtractLongRunningResultResponse<
          google::cloud::config::v1::Deployment>,
      retry_policy(), backoff_policy(),
      idempotency_policy()->UnlockDeployment(request), polling_policy(),
      __func__);
}

StatusOr<google::cloud::config::v1::LockInfo>
ConfigConnectionImpl::ExportLockInfo(
    google::cloud::config::v1::ExportLockInfoRequest const& request) {
  return google::cloud::internal::RetryLoop(
      retry_policy(), backoff_policy(),
      idempotency_policy()->ExportLockInfo(request),
      [this](grpc::ClientContext& context,
             google::cloud::config::v1::ExportLockInfoRequest const& request) {
        return stub_->ExportLockInfo(context, request);
      },
      request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace config_v1_internal
}  // namespace cloud
}  // namespace google
